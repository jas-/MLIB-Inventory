<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <link rel="stylesheet" href="../../Styles/jqx.apireference.css" type="text/css" />
    <script type="text/javascript" src="../../scripts/jquery-1.9.0.min.js"></script>
    <meta name="keywords" content="jQuery, Grid, Grid plugin, Grid View, Help Documentation" />
    <meta name="description" content="This page represents the help documentation of the jqxGrid widget." />
    <title>jqxGrid API Reference</title>
    <script type="text/javascript">
        $(document).ready(function () {
            $(".documentation-option-type-click").click(function (event) {
                $(event.target).parents('tr').next().find(".property-content").toggle();
            });
        });
    </script>
</head>
<body>
    <div id="properties">
        <h2 class="documentation-top-header">
            Properties</h2>
        <table class="documentation-table">
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                    Appearance
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                    Name
                </th>
                <th>
                    Type
                </th>
                <th>
                    Default
                </th>
            </tr>
          <tr>
                <td class="documentation-option-type-click">
                    <span id='Span79'>rtl</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    false
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        Gets or sets a value indicating whether widget's elements are aligned to support locales using right-to-left fonts.
                       <h4>
                            Code example</h4>
                        <p>
                            Set the "rtl" property.
                        </p>
                        <pre><code>$('#widget').jqxGrid({rtl : true}); </code></pre>
                        <p>
                            Get the "rtl" property.
                        </p>
                        <pre><code>var rtl = $('#widget').jqxGrid('rtl'); </code></pre>
                    </div>
                </td>
            </tr>
           <tr>
                <td class="documentation-option-type-click">
                    <span id='Span201'>theme</span>
                </td>
                <td>
                    <span>String</span>
                </td>
                <td>
                    ''
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Sets the widget's theme.</p>
                        jQWidgets uses a pair of css files - jqx.base.css and jqx.[theme name].css. The base stylesheet creates the styles related to the widget's layout like margin, padding, border-width, position. The second css file applies the widget's colors and backgrounds. The jqx.base.css should be included before the second CSS file.
                        In order to set a theme, you need to do the following:
                        <ul>
                            <li>Include the theme's CSS file after jqx.base.css.<br />The following code example adds the 'energyblue' theme.
<pre><code>
<pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;../../jqwidgets/styles/jqx.base.css&quot; type=&quot;text/css&quot; /&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;../../jqwidgets/styles/jqx.energyblue.css&quot; type=&quot;text/css&quot; /&gt;
</code></pre>
</code></pre>
                            </li>
                            <li>
                                Set the widget's theme property to 'energyblue' when you initialize it.
                            </li>
                        </ul>
                    </div>
                </td>
            </tr>
            <tr>
                <td class="documentation-option-type-click">
                    <span id='Span16'>altrows</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    false
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Enables or disables the alternating rows.</p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>altrows</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ altrows: false}); </code></pre>
                    </div>
                </td>
            </tr>
         <tr>
          <td class="documentation-option-type-click">
                    <span id='Span17'>altstart</span>
                </td>
                <td>
                    <span>Number</span>
                </td>
                <td>
                    1
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            This property specifies the first alternating row.</p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>altstart</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ altstart: 2}); </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
          <td class="documentation-option-type-click">
                    <span id='Span18'>altstep</span>
                </td>
                <td>
                    <span>Number</span>
                </td>
                <td>
                    1
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Sets the alternating step</p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>altstep</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ altstep: 2}); </code></pre>
                    </div>
                </td>
            </tr>
          <tr>
                <td class="documentation-option-type-click">
                    <span id='Span200'>showdefaultloadelement</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    true
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Determines whether the Grid should display the built-in loading element or should use a DIV tag with class 'jqx-grid-load'</p>
                        <h4>
                            Code example</h4>
                        <p>
                            Sets the <code>showdefaultloadelement</code> property.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ showdefaultloadelement: false}); </code></pre>
                    </div>
                </td>
            </tr>
         <tr>
                <td class="documentation-option-type-click">
                    <span id='Span199'>autoshowloadelement</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    true
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Determines whether the loading image should be displayed until the Grid's data is loaded.</p>
                        <h4>
                            Code example</h4>
                        <p>
                            Sets the <code>autoshowloadelement</code> property.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ autoshowloadelement: false}); </code></pre>
                    </div>
                </td>
            </tr>
           <tr>
                <td class="documentation-option-type-click">
                    <span id='Span146'>autoshowfiltericon</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    true
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>(requires jqxgrid.filter.js)</p>
                        <p>
                            Displays the filter icon only when the column is filtered. When the value of this property is set to false, all grid columns will display a filter icon when the filtering is enabled.</p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>autoshowfiltericon</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ autoshowfiltericon: false}); </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
            <td class="documentation-option-type-click">
                    <span id='Span34'>closeablegroups</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    true
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>(requires jqxgrid.grouping.js)</p>
                        <p>
                            When the value of this property is true, a close button is displayed in each grouping column.</p>
                         <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>closeablegroups</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ closeablegroups: false}); </code></pre>
                    </div>
                </td>
            </tr>
           <tr>         
            <td class="documentation-option-type-click">
                    <span id='Span184'>handlekeyboardnavigation</span>
                </td>
                <td>
                    <span>function</span>
                </td>
                <td>
                    null
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            The function is called when a key is pressed. If the result of the function is true, the default keyboard navigation will be overriden for the pressed key.</p>
                         <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>handlekeyboardnavigation</code> property specified.
                        </p>
                        <pre><code>
var handleKeys = function(event)
{
   var key = event.charCode ? event.charCode : event.keyCode ? event.keyCode : 0;
}
$('#grid').jqxGrid({ handlekeyboardnavigation: handleKeys});

                        </code></pre>
                    </div>
                </td>
            </tr>
           <tr>         
            <td class="documentation-option-type-click">
                    <span id='Span180'>enableellipsis</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    true
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Determines whether ellipsis will be displayed, if the cells or columns content overflows.</p>
                         <h4>
                            Code example</h4>
                        <p>
                            Set the <code>enableellipsis</code> property.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ enableellipsis: false}); </code></pre>
                        <br />
                    </div>
                </td>
            </tr>
         <tr>
            <td class="documentation-option-type-click">
                    <span id='Span40'>columnsmenuwidth</span>
                </td>
                <td>
                    <span>Number</span>
                </td>
                <td>
                    15
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>(requires jqxmenu.js)</p>
                        <p>
                            Sets the columns menu width.</p>
                         <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>columnsmenuwidth</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ columnsmenuwidth: 20}); </code></pre>
                    </div>
                </td>
            </tr>
      <tr>
            <td class="documentation-option-type-click">
                    <span id='Span107'>autoshowcolumnsmenubutton</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    true
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>(requires jqxmenu.js)</p>
                        <p>
                            Sets whether the columns menu button will be displayed only when the mouse cursor is over a columns header or will be always displayed.</p>
                         <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>autoshowcolumnsmenubutton</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ autoshowcolumnsmenubutton: false}); </code></pre>
                    </div>
                </td>
            </tr>            
          <tr>
                <td class="documentation-option-type-click">
                    <span id='Span11'>enablerowdetailsindent</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    true
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            When the enablerowdetailsindent is true, the content of a details row is displayed with left offset equal to the width of the row details column.</p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>enablerowdetailsindent</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ enablerowdetailsindent: false}); </code></pre>
                    </div>
                </td>
            </tr>
          <tr>
            <td class="documentation-option-type-click">
                    <span id='Span43'>enableanimations</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    true
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                           Enables or disables the grid animations.</p>
                         <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>enableanimations</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ enableanimations: false}); </code></pre>
                    </div>
                </td>
            </tr>
           <tr>
            <td class="documentation-option-type-click">
                    <span id='Span44'>enabletooltips</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    false
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                           Enables or disables the grid tooltips.</p>
                         <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>enabletooltips</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ enabletooltips: false}); </code></pre>
                    </div>
                </td>
            </tr>
         <tr>
            <td class="documentation-option-type-click">
                    <span id='Span45'>enablehover</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    true
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                           Enables or disables the grid rows hover state.</p>
                         <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>enablehover</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ enablehover: false}); </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
            <td class="documentation-option-type-click">
                    <span id='Span197'>enablebrowserselection</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    false
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                           Enables the text selection of the browser.</p>
                         <h4>
                            Code example</h4>
                        <p>
                            Set a Grid with the <code>enablebrowserselection</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ enablebrowserselection: true}); </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
            <td class="documentation-option-type-click">
                    <span id='Span21'>groupsrenderer</span>
                </td>
                <td>
                    <span>function</span>
                </td>
                <td>
                    null
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>(requires jqxgrid.grouping.js)</p>
                        <p>
                            This function is called when a group is rendered. You can use it to customize the default group rendering.</p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with a <code>groupsrenderer</code> specified.
                        </p>
                        <pre><code> 
var groupsrenderer = function (text, group, expanded) {
    return "<span>" + group + "</span>";
}

$("#jqxgrid").jqxGrid(
{
    source: source,
    groupsrenderer: groupsrenderer,
    columns: [
        { text: 'Ship Name', datafield: 'ShipName', width: 250 },
        { text: 'Ship City', datafield: 'ShipCity', width: 100 },
        { text: 'Ship Country', datafield: 'ShipCountry' }
    ],
    groupable: true,
    groups: ['ShipCity']
});
            </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
            <td class="documentation-option-type-click">
                    <span id='Span22'>groupcolumnrenderer</span>
                </td>
                <td>
                    <span>function</span>
                </td>
                <td>
                    null
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>(requires jqxgrid.grouping.js)</p>
                        <p>
                            Sets a custom renderer for the grouping columns displayed in the grouping header when the grouping feature is enabled.</p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with a <code>groupcolumnrenderer</code> specified.
                        </p>
                        <pre><code>
var groupcolumnrenderer = function (text) {
return '&lt;div style=&quot;padding: 5px; float: left; color: Blue;&quot;&gt;' + text + '&lt;/div&gt;';
}

$("#jqxgrid").jqxGrid(
{
    source: source,
    groupcolumnrenderer: groupcolumnrenderer,
    columns: [
    { text: 'Ship Name', datafield: 'ShipName', width: 250 },
    { text: 'Ship City', datafield: 'ShipCity', width: 100 },
    { text: 'Ship Country', datafield: 'ShipCountry' }
    ],
    groupable: true,
    groups: ['ShipCity']
});
                        </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
        <td class="documentation-option-type-click">
                    <span id='Span23'>groupsexpandedbydefault</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    false
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>(requires jqxgrid.grouping.js)</p>
                        <p>
                            Sets the default state of the grouped rows.</p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>groupsexpandedbydefault</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ groupsexpandedbydefault: true}); </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
            <td class="documentation-option-type-click">
                    <span id='Span24'>pagerrenderer</span>
                </td>
                <td>
                    <span>function</span>
                </td>
                <td>
                    null
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>(requires jqxgrid.pager.js)</p>
                        <p>
                            The function is called when the Grid Pager is rendered. This allows you to customize the 
                            default rendering of the pager.</p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with a <code>pagerrenderer</code> specified.
                        </p>
                        <pre><code>
var pagerrenderer = function () {
    var element = $(&quot;&lt;div style='margin-top: 5px; width: 100%; height: 100%;'&gt;&lt;/div&gt;&quot;);
    var paginginfo = $(&quot;#jqxgrid&quot;).jqxGrid('getpaginginformation');
    for (i = 0; i &lt; paginginfo.pagescount; i++) {
        var anchor = $(&quot;&lt;a style='padding: 5px;' href='#&quot; + i + &quot;'&gt;&quot; + i + &quot;&lt;/a&gt;&quot;);
        anchor.appendTo(element);
        anchor.click(function (event) {
            var pagenum = parseInt($(event.target).text());
            $(&quot;#jqxgrid&quot;).jqxGrid('gotopage', pagenum);
        });
    }

    return element;
}

$(&quot;#jqxgrid&quot;).jqxGrid(
{
    width: 670,
    source: source,
    pagerrenderer: pagerrenderer,
    sortable: true,
    pageable: true,
    autoheight: true,
    columns: [
        { text: 'Ship Name', datafield: 'ShipName', width: 250 },
        { text: 'Shipped Date', datafield: 'ShippedDate', width: 230, cellsformat: 'D' },
        { text: 'Freight', datafield: 'Freight', width: 130, cellsformat: 'F2', cellsalign: 'right' },
        { text: 'Ship Address', datafield: 'ShipAddress', width: 350 },
        { text: 'Ship City', datafield: 'ShipCity', width: 100 },
        { text: 'Ship Country', datafield: 'ShipCountry', width: 100 }
    ]
});
                        </code></pre>
                    </div>
                </td>
            </tr>
           <tr>
                <td class="documentation-option-type-click">
                    <span id='Span147'>showfiltercolumnbackground</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    true
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>(requires jqxgrid.filter.js)</p>
                        <p>
                            When this property is true, the Grid adds an additional visual style to the grid cells in the filter column(s).</p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>showfiltercolumnbackground</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ showfiltercolumnbackground: false}); </code></pre>
                    </div>
                </td>
            </tr>
           <tr>
                <td class="documentation-option-type-click">
                    <span id='Span189'>showfiltermenuitems</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    true
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>(requires jqxgrid.filter.js)</p>
                        <p>
                            Determines whether to display the filtering items in the column's menu.</p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>showfiltermenuitems</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ showfiltermenuitems: false}); </code></pre>
                    </div>
                </td>
            </tr>
           <tr>
                <td class="documentation-option-type-click">
                    <span id='Span148'>showpinnedcolumnbackground</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    true
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            When this property is true, the Grid adds an additional visual style to the grid cells in the pinned column(s).</p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>showpinnedcolumnbackground</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ showpinnedcolumnbackground: false}); </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
                <td class="documentation-option-type-click">
                    <span id='Span149'>showsortcolumnbackground</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    true
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>(requires jqxgrid.sort.js)</p>
                        <p>
                            When this property is true, the Grid adds an additional visual style to the grid cells in the sort column.</p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>showsortcolumnbackground</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ showsortcolumnbackground: false}); </code></pre>
                    </div>
                </td>
           </tr>         
            <tr>
                <td class="documentation-option-type-click">
                    <span id='Span190'>showsortmenuitems</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    true
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>(requires jqxgrid.sort.js)</p>
                        <p>
                            Determines whether to display the sort menu items.</p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>showsortmenuitems</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ showsortmenuitems: false}); </code></pre>
                    </div>
                </td>
           </tr>
         <tr>
                <td class="documentation-option-type-click">
                    <span id='Span191'>showgroupmenuitems</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    true
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>(requires jqxgrid.grouping.js)</p>
                        <p>
                            Determines whether to display the group menu items.</p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>showgroupmenuitems</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ showgroupmenuitems: false}); </code></pre>
                    </div>
                </td>
           </tr>
           <tr>
           <td class="documentation-option-type-click">
                    <span id='Span19'>showrowdetailscolumn</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    true
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Shows an additional column with expand/collapse toggle buttons when the Row details feature is enabled.</p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>showrowdetailscolumn</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ showrowdetailscolumn: false}); </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
            <td class="documentation-option-type-click">
                    <span id='Span32'>showheader</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    true
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Shows or hides the columns header.</p>
                         <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>showheader</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ showheader: false}); </code></pre>
                    </div>
                </td>
            </tr>
             <tr>
            <td class="documentation-option-type-click">
                    <span id='Span33'>showgroupsheader</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    true
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>(requires jqxgrid.grouping.js)</p>
                        <p>
                        Shows or hides the groups header area.</p>
                         <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>showgroupsheader</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ showgroupsheader: true}); </code></pre>
                    </div>
                </td>
            </tr>
             <tr>
            <td class="documentation-option-type-click">
                    <span id='Span87'>showaggregates</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    false
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>(requires jqxgrid.aggregates.js)</p>
                        <p>
                        Shows or hides the aggregates in the grid's statusbar.</p>
                         <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>showaggregates</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ showaggregates: true}); </code></pre>
                    </div>
                </td>
            </tr>
        <tr>
            <td class="documentation-option-type-click">
                    <span id='Span103'>showfilterrow</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    false
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>(requires jqxgrid.filter.js)</p>
                        <p>
                        Shows or hides the filter row.</p>
                         <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>showfilterrow</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ showfilterrow: true}); </code></pre>
                        <br />
                        The filter row supports the following filter types:
                        <ul>
                            <li>'textbox' - input field.</li>
                            <li>'checkedlist' - dropdownlist with checkboxes that specify which records should be visible and hidden.</li>
                            <li>'list' - dropdownlist which specifies the visible records depending on the selection.</li>
                            <li>'number' - numeric input field.</li>
                            <li>'checkbox' - filter for boolean data.</li>
                            <li>'date' - filter for dates.</li>
                        </ul>
                    </div>
                </td>
            </tr>
          <tr>
            <td class="documentation-option-type-click">
                    <span id='Span145'>showemptyrow</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    true
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Shows or hides the empty row label when the Grid has no records to display.</p>
                         <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>showemptyrow</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ showemptyrow: false}); </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
            <td class="documentation-option-type-click">
                    <span id='Span91'>showstatusbar</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    false
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                        Shows or hides the grid's statusbar.</p>
                         <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>showstatusbar</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ showstatusbar: true}); </code></pre>
                    </div>
                </td>
            </tr>
        <tr>
            <td class="documentation-option-type-click">
                    <span id='Span97'>statusbarheight</span>
                </td>
                <td>
                    <span>Number</span>
                </td>
                <td>
                    34
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                        Sets the statusbar's height.</p>
                         <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>statusbarheight</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ statusbarheight: 40}); </code></pre>
                    </div>
                </td>
            </tr>
          <tr>
            <td class="documentation-option-type-click">
                    <span id='Span93'>showtoolbar</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    false
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                        Shows or hides the grid's toolbar.</p>
                         <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>showtoolbar</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ showtoolbar: true}); </code></pre>
                    </div>
                </td>
            </tr>
          <tr>
            <td class="documentation-option-type-click">
                    <span id='Span96'>toolbarheight</span>
                </td>
                <td>
                    <span>Number</span>
                </td>
                <td>
                    34
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                        Sets the toolbar's height.</p>
                         <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>toolbarheight</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ toolbarheight: 40}); </code></pre>
                    </div>
                </td>
            </tr>
      <tr>
            <td class="documentation-option-type-click">
                    <span id='Span46'>selectionmode</span>
                </td>
                <td>
                    <span>String</span>
                </td>
                <td>
                    'singlerow'
                </td>
            </tr>
          <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>(requires jqxgrid.selection.js)</p>
                        <p>
                           Sets the selection mode to "none", "singlerow", "multiplerows", "multiplerowsextended", "singlecell", "multiplecells", "multiplecellsextended", "multiplecellsadvanced".</p>
                           <ul>
                            <li>"none" - disables the selection.</li>
                            <li>"singlerow" - full row selection.</li>
                            <li>"multiplerows" - each click selects a new row. Click on a selected row unselects it.</li>
                            <li>"multiplerowsextended" - multiple rows selection with drag and drop. The selection behavior resembles the selection of icons on your desktop.</li>
                            <li>"singlecell" - single cell selection.</li>
                            <li>"multiplecells" - each click selects a new cell. Click on a selected cell unselects it..</li>
                            <li>"multiplecellsextended" - In this mode, users can select multiple cells with a drag and drop. The selection behavior resembles the selection of icons on your desktop.</li>
                            <li>"multiplecellsadvanced" - The ‘multiplecellsadvanced’ mode is the most advanced cells selection mode. In this mode, users can select multiple cells with a drag and drop. The selection behavior resembles the selection of cells in a spreadsheet.</li>
                           </ul>
                         <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>selectionmode</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ selectionmode: 'none'}); </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                    Layout
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                    Name
                </th>
                <th>
                    Type
                </th>
                <th>
                    Default
                </th>
            </tr>   
            <tr>
                <td class="documentation-option-type-click">
                    <span id='Span3'>height</span>
                </td>
                <td>
                    <span>Number/String</span>
                </td>
                <td>
                    400
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Sets the Grid height.</p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>height</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ height: 250 }); </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
                <td class="documentation-option-type-click">
                    <span id='Span134'>width</span>
                </td>
                <td>
                    <span>Number/String</span>
                </td>
                <td>
                    600
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Sets the Grid width.</p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>width</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ width: 250 }); </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
                <td class="documentation-option-type-click">
                    <span id='Span4'>pagerheight</span>
                </td>
                <td>
                    <span>Number/String</span>
                </td>
                <td>
                    28
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                         <p>(requires jqxgrid.pager.js)</p>
                       <p>
                            Sets the height of the Grid Pager.</p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>pagerheight</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ pagerheight: 30}); </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
                <td class="documentation-option-type-click">
                    <span id='Span2'>groupsheaderheight</span>
                </td>
                <td>
                    <span>Number/String</span>
                </td>
                <td>
                    34
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>(requires jqxgrid.grouping.js)</p>
                        <p>
                            Sets the height of the Grid Groups Header.</p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>groupsheaderheight</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ groupsheaderheight: 40}); </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
                <td class="documentation-option-type-click">
                    <span id='Span7'>rowsheight</span>
                </td>
                <td>
                    <span>Number</span>
                </td>
                <td>
                    25
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Sets the height of the grid rows.</p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>rowsheight</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ rowsheight: 20}); </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
           <td class="documentation-option-type-click">
                    <span id='Span8'>columnsheight</span>
                </td>
                <td>
                    <span>Number</span>
                </td>
                <td>
                    25
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Sets the columns height.</p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>columnsheight</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ columnsheight: 30}); </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
                <td class="documentation-option-type-click">
                    <span id='Span9'>groupindentwidth</span>
                </td>
                <td>
                    <span>Number</span>
                </td>
                <td>
                    20
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                       <p>(requires jqxgrid.grouping.js)</p>
                       <p>
                            Sets the group indent size. This size is used when the grid is grouped. This is the size of the columns with expand/collapse toggle buttons.</p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>groupindentwidth</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ groupindentwidth: 30}); </code></pre>
                    </div>
                </td>
            </tr>        
            <tr>
            <td class="documentation-option-type-click">
                    <span id='Span31'>autoheight</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    false
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Sets the height of the grid to be equal to the summary height of the grid rows. This option should be set when the Grid is in paging mode.</p>
                         <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>autoheight</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ autoheight: true}); </code></pre>
                    </div>
                </td>
            </tr>   
            <tr>      
           <td class="documentation-option-type-click">
                    <span id='Span204'>autorowheight</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    false
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            The "autorowheight" property works along with the "autoheight" property. When "autorowheight" is set to true, the height of the Grid rows is dynamically changed depending on the cell values.</p>
                    </div>
                </td>
            </tr>               
            <tr>
            <td class="documentation-option-type-click">
                    <span id='Span35'>scrollbarsize</span>
                </td>
                <td>
                    <span>Number</span>
                </td>
                <td>
                    15
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                        Sets the scrollbars size.</p>
                         <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>scrollbarsize</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ scrollbarsize: 17}); </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
            <td class="documentation-option-type-click">
                    <span id='Span205'>scrollmode</span>
                </td>
                <td>
                    <span>String</span>
                </td>
                <td>
                    "default"
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                        Determines the scrolling mode. Available values: "default", "logical", "deferred". In the logical mode, the movement of the scrollbar thumb is by row, not by pixel. In "deferred" scroll mode, content is stationary when the user drags the Thumb of a ScrollBar.</p>
                         <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>scrollmode</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ scrollmode: 'logical'}); </code></pre>
                    </div>
                </td>
            </tr>
           <tr>
            <td class="documentation-option-type-click">
                    <span id='Span206'>deferreddatafields</span>
                </td>
                <td>
                    <span>Array</span>
                </td>
                <td>
                    []
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                        Determines the cell values displayed in a tooltip next to the scrollbar when the "scrollmode" is set to "deferred".</p>
                         <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>deferreddatafields</code> property specified.
                        </p>
                        <pre><code>
$("#jqxgrid").jqxGrid(
{
    source: adapter,
    scrollmode: 'deferred',
    deferreddatafields: ['firstname', 'lastname', 'productname'],
    columns: [
        { text: 'First Name', datafield: 'firstname', width: 100 },
        { text: 'Last Name', datafield: 'lastname', width: 100 },
        { text: 'Product', datafield: 'productname', width: 180 },
        { text: 'Quantity', datafield: 'quantity', width: 80, cellsalign: 'right' },
        { text: 'Unit Price', datafield: 'price', width: 80, cellsalign: 'right', cellsformat: 'c2' },
        { text: 'Total', datafield: 'total', cellsalign: 'right', cellsformat: 'c2' }
    ]
});
                        </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
            <td class="documentation-option-type-click">
                    <span id='Span80'>scrollfeedback</span>
                </td>
                <td>
                    <span>function</span>
                </td>
                <td>
                    null
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        When the "scrollmode" is set to "deferred", the "scrollfeedback" function may be used to display custom UI Tooltip next to the scrollbar.
                          <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>scrollfeedback</code> property specified.
                        </p>
<pre style='width: 700px; max-width: 700px; margin: 10px;' class='code'>$(<span style="clear: both; padding: 0px; margin: 0px; color: #a24;">"#jqxgrid"</span>).jqxGrid(<div/>{<div/>    source: dataAdapter,<div/>    altrows: true,<div/>    sortable: true,<div/>    scrollmode: <span style=" clear: both; padding: 0px; margin: 0px; color: #a24;">'deferred'</span>,<div/>    scrollfeedback: function(row)<div/>    {<div/>        return <span style=" clear: both; padding: 0px; margin: 0px; color: #a24;">'<span style="clear: both; padding: 0px; margin: 0px; color: #11a;">&lt;table style=<span style="clear: both; padding: 0px; margin: 0px; color: #a24;">"height: 150px;"&gt;</span><span style="clear: both; padding: 0px; margin: 0px; color: #11a;">&lt;tr&gt;</span><span style="clear: both; padding: 0px; margin: 0px; color: #11a;">&lt;td&gt;</span><span style="clear: both; padding: 0px; margin: 0px; color: #11a;">&lt;img src="../../images/t-shirts/' + row.pic + '"</span>/&gt;</span><span style="clear: both; padding: 0px; margin: 0px; color: #11a;">&lt;/td&gt;</span><span style="clear: both; padding: 0px; margin: 0px; color: #11a;">&lt;/tr&gt;</span><span style="clear: both; padding: 0px; margin: 0px; color: #11a;">&lt;tr&gt;</span><span style="clear: both; padding: 0px; margin: 0px; color: #11a;">&lt;td&gt;</span>' + row.label + '<span style="clear: both; padding: 0px; margin: 0px; color: #11a;">&lt;/td&gt;</span><span style="clear: both; padding: 0px; margin: 0px; color: #11a;">&lt;/tr&gt;</span><span style="clear: both; padding: 0px; margin: 0px; color: #11a;">&lt;/table&gt;</span>'</span>;<div/>    },<div/>    rowsheight: 115,<div/>    columns: [<div/>        {<div/>            text: <span style=" clear: both; padding: 0px; margin: 0px; color: #a24;">'Image', datafield: 'pic'</span>, width: 115, cellsrenderer: function (row, column, value) {<div/>                return <span style=" clear: both; padding: 0px; margin: 0px; color: #a24;">'<span style="clear: both; padding: 0px; margin: 0px; color: #11a;">&lt;img src=<span style="clear: both; padding: 0px; margin: 0px; color: #a24;">"../../images/t-shirts/' + value + '"</span>/&gt;</span>'</span>;<div/>            }<div/>        },<div/>        {<div/>            text: <span style=" clear: both; padding: 0px; margin: 0px; color: #a24;">'Title', datafield: 'label'</span>, width: 250<div/>        },<div/>        {<div/>            text: <span style=" clear: both; padding: 0px; margin: 0px; color: #a24;">'Price', cellsformat: 'c2', datafield: 'price'</span><div/>        }<div/>    ]<div/>});<div/></pre>
                    </div>
                </td>
            </tr>            
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>                                
         <tr>
             <th>
                    Behavior
              </th>
              <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                    Name
                </th>
                <th>
                    Type
                </th>
                <th>
                    Default
                </th>
            </tr>   
            <tr>
                <td class="documentation-option-type-click">
                    <span id='Span1'>disabled</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    false
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Enables or disables the Grid plugin.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>disabled</code> property specified.
                        </p>
                        <pre><code>$("#grid").jqxGrid({ disabled: true});</code></pre>
                    </div>
                </td>
            </tr>   
            <tr>
                <td class="documentation-option-type-click">
                    <span id='Span165'>verticalscrollbarstep</span>
                </td>
                <td>
                    <span>Number</span>
                </td>
                <td>
                    5
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Sets the scrollbar's step when the user clicks the scroll arrows.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>verticalscrollbarstep</code> property specified.
                        </p>
                        <pre><code>$("#grid").jqxGrid({ verticalscrollbarstep: 15});</code></pre>
                    </div>
                </td>
            </tr>
          <tr>
                <td class="documentation-option-type-click">
                    <span id='Span166'>verticalscrollbarlargestep</span>
                </td>
                <td>
                    <span>Number</span>
                </td>
                <td>
                    400
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Sets the scrollbar's large step. This property specifies the step with which the vertical scrollbar's
                            value is changed when the user clicks the area above or below the thumb.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>verticalscrollbarlargestep</code> property specified.
                        </p>
                        <pre><code>$("#grid").jqxGrid({ verticalscrollbarlargestep: 50});</code></pre>
                    </div>
                </td>
            </tr>
          <tr>
                <td class="documentation-option-type-click">
                    <span id='Span167'>horizontalscrollbarstep</span>
                </td>
                <td>
                    <span>Number</span>
                </td>
                <td>
                    5
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Sets the scrollbar's step when the user clicks the scroll arrows.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>horizontalscrollbarstep</code> property specified.
                        </p>
                        <pre><code>$("#grid").jqxGrid({ horizontalscrollbarstep: 15});</code></pre>
                    </div>
                </td>
            </tr>
          <tr>
                <td class="documentation-option-type-click">
                    <span id='Span168'>horizontalscrollbarlargestep</span>
                </td>
                <td>
                    <span>Number</span>
                </td>
                <td>
                    50
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Sets the scrollbar's large step. This property specifies the step with which the horizontal scrollbar's
                            value is changed when the user clicks the area above or below the thumb.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>horizontalscrollbarlargestep</code> property specified.
                        </p>
                        <pre><code>$("#grid").jqxGrid({ horizontalscrollbarlargestep: 50});</code></pre>
                    </div>
                </td>
            </tr>
          <tr>
                <td class="documentation-option-type-click">
                    <span id='Span169'>keyboardnavigation</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    true
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>(requires jqxgrid.selection.js)</p>
                        <p>
                            Enables or disables the keyboard navigation.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>keyboardnavigation</code> property specified.
                        </p>
                        <pre><code>$("#grid").jqxGrid({ keyboardnavigation: false});</code></pre>
                    </div>
                </td>
            </tr>
            <tr>
                <td class="documentation-option-type-click">
                    <span id='Span192'>autosavestate</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    false
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>(requires jqxgrid.storage.js)</p>
                        <p>
                            Determines whether the Grid automatically saves its current state. 
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Set the <code>autosavestate</code> property.
                        </p>
                        <pre><code>$("#grid").jqxGrid({ autosavestate: true});</code></pre>
                    </div>
                </td>
            </tr>
           <tr>
                <td class="documentation-option-type-click">
                    <span id='Span193'>autoloadstate</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    false
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>(requires jqxgrid.storage.js)</p>
                        <p>
                            Determines whether the Grid automatically loads its current state(if there's already saved one). The Grid's state is loaded when the page is refreshed.  
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Set the <code>autoloadstate</code> property.
                        </p>
                        <pre><code>$("#grid").jqxGrid({ autoloadstate: true});</code></pre>
                    </div>
                </td>
            </tr>
            <tr>
                <td class="documentation-option-type-click">
                    <span id='Span5'>pagesize</span>
                </td>
                <td>
                    <span>Number</span>
                </td>
                <td>
                    10
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>(requires jqxgrid.pager.js)</p>
                        <p>
                            Sets the number of visible rows per page when the Grid paging is enabled.</p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>pagesize</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ pagesize: 20}); </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
                <td class="documentation-option-type-click">
                    <span id='Span6'>pagesizeoptions</span>
                </td>
                <td>
                    <span>Array</span>
                </td>
                <td>
                    ['5', '10', '20']
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>(requires jqxgrid.pager.js)</p>
                        <p>
                            Sets the available page size options.</p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>pagesizeoptions</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ pagesizeoptions: ['10', '20', '30']}); </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
                <td class="documentation-option-type-click">
                    <span id='Span10'>rowdetails</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    false
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Enables or disables the row details. When this option is enabled, the Grid can show additional information below each grid row.</p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>rowdetails</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ rowdetails: true}); </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
                <td class="documentation-option-type-click">
                    <span id='Span12'>initrowdetails</span>
                </td>
                <td>
                    <span>function</span>
                </td>
                <td>
                    null
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            This function is called when the user expands the row details and the details are going to be rendered.</p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>initrowdetails</code> specified.
                        </p>
                        <pre><code>
                        var initrowdetails = function (index) {
                            // your row details initialization code here. The index is the index of the expanded row with details.
                        }
                        $('#grid').jqxGrid({ initrowdetails: initrowdetails}); </code></pre>
                    </div>
                </td>
            </tr>
         <tr>
                <td class="documentation-option-type-click">
                    <span id='Span160'>rowdetailstemplate</span>
                </td>
                <td>
                    <span>Object</span>
                </td>
                <td>
                    null
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Determines the template of the row details. The rowdetails field specifies the HTML used for details. The rowdetailsheight specifies the height of the details.</p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>rowdetailstemplate</code> property specified. 
                        </p>
                        <pre><code>$('#grid').jqxGrid({ rowdetailstemplate: { rowdetails: "<pre style='margin: 10px;' class='code'><span style="clear: both; padding: 0px; margin: 0px; color: #11a;">&lt;div style=<span style=" clear: both; padding: 0px; margin: 0px; color: #a24;">'margin: 10px;'&gt;</span><span style="clear: both; padding: 0px; margin: 0px; color: #11a;">&lt;ul style='margin-left: 30px;'&gt;</span><span style="clear: both; padding: 0px; margin: 0px; color: #11a;">&lt;li class='title'&gt;</span><span style="clear: both; padding: 0px; margin: 0px; color: #11a;">&lt;/li&gt;</span><span style="clear: both; padding: 0px; margin: 0px; color: #11a;">&lt;li&gt;</span>Notes<span style="clear: both; padding: 0px; margin: 0px; color: #11a;">&lt;/li&gt;</span><span style="clear: both; padding: 0px; margin: 0px; color: #11a;">&lt;/ul&gt;</span><span style="clear: both; padding: 0px; margin: 0px; color: #11a;">&lt;div class='information'&gt;</span><span style="clear: both; padding: 0px; margin: 0px; color: #11a;">&lt;/div&gt;</span><span style="clear: both; padding: 0px; margin: 0px; color: #11a;">&lt;div class='notes'</span>&gt;</span><span style="clear: both; padding: 0px; margin: 0px; color: #11a;">&lt;/div&gt;</span><span style="clear: both; padding: 0px; margin: 0px; color: #11a;">&lt;/div&gt;</span><div/></pre>", rowdetailsheight: 200 }); </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
                <td class="documentation-option-type-click">
                    <span id='Span138'>ready</span>
                </td>
                <td>
                    <span>function</span>
                </td>
                <td>
                    null
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            This function is called when the grid is initialized and the binding is complete.</p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>ready</code>function specified.
                        </p>
                        <pre><code>
$("#jqxgrid").jqxGrid(
{
    source: source, 
    ready: function()
    {
        $("#jqxgrid").jqxGrid('sortby', 'firstname', 'asc');     
    },
    columns: [
        { text: 'First Name', datafield: 'firstname', width: 100 },
        { text: 'Last Name', datafield: 'lastname', width: 100 },
        { text: 'Product', datafield: 'productname', width: 180 },
        { text: 'Quantity', datafield: 'quantity', width: 80, cellsalign: 'right' },
        { text: 'Unit Price', datafield: 'price', width: 90, cellsalign: 'right', cellsformat: 'c2' },
        { text: 'Total', datafield: 'total', cellsalign: 'right', cellsformat: 'c2' }
    ]
});                        
                        </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
                <td class="documentation-option-type-click">
                    <span id='Span13'>pageable</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    false
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>(requires jqxgrid.pager.js)</p>
                        <p>
                            Enables or disables the Grid Paging feature. When the value of this property is true, 
                            the Grid displays a pager below the rows.</p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>pageable</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ pageable: true}); </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
                <td class="documentation-option-type-click">
                    <span id='Span139'>filterable</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    false
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>(requires jqxgrid.filter.js)</p>
                        <p>
                            Enables or disables the Grid Filtering feature. When the value of this property is true, 
                            the Grid displays a filtering panel in the columns popup menus.</p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>filterable</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ filterable: true}); </code></pre>
                    </div>
                </td>
            </tr>
          <tr>
          <td class="documentation-option-type-click">
                    <span id='Span163'>editable</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    false
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>(requires jqxgrid.edit.js)</p>
                        <p>
                            The editable property enables or disables the Grid editing feature.</p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>editable</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ editable: true}); </code></pre>
                    </div>
                </td>
            </tr>
         <tr>
          <td class="documentation-option-type-click">
                    <span id='Span164'>editmode</span>
                </td>
                <td>
                    <span>String</span>
                </td>
                <td>
                    'selectedcell'
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>(requires jqxgrid.edit.js)</p>
                        <p>
                            The editmode property specifies the action that the end-user should make to open an editor.
                            <br />
                            Possible Values:
                            "click", "dblclick", "selectedcell" or "programmatic".
                            - 'click' - Marks the clicked cell as selected and shows the editor. The editor’s value is equal to the cell’s value.
                            - 'selectedcell' - Marks the cell as selected. A second click on the selected cell shows the editor. The editor’s value is equal to the cell’s value.
                            - 'dblclick' - Marks the clicked cell as selected and shows the editor. The editor’s value is equal to the cell’s value.
                            - 'programmatic' - Cell editors are activated and deactivated only through the API(see begincelledit and endcelledit methods). 
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>editmode</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ editmode: 'click'}); </code></pre>
                    </div>
                </td>
            </tr>
           <tr>
          <td class="documentation-option-type-click">
                    <span id='Span15'>sortable</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    false
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>(requires jqxgrid.sort.js)</p>
                        <p>
                            The sortable property enables or disables the sorting feature.</p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>sortable</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ sortable: true}); </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
                <td class="documentation-option-type-click">
                    <span id='Span14'>groupable</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    false
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>(requires jqxgrid.grouping.js)</p>
                        <p>
                           This property enables or disables the grouping feature. </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>groupable</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ groupable: true}); </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
            <td class="documentation-option-type-click">
                    <span id='Span20'>groups</span>
                </td>
                <td>
                    <span>Array</span>
                </td>
                <td>
                    []
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>(requires jqxgrid.grouping.js)</p>
                        <p>
                            Sets the Grid groups when the Grouping feature is enabled.</p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>groups</code> property specified.
                        </p>
                        <pre><code>          
$("#jqxgrid").jqxGrid(
{
    source: source,
    columns: [
        { text: 'Ship Name', datafield: 'ShipName', width: 250 },
        { text: 'Ship City', datafield: 'ShipCity', width: 100 },
        { text: 'Ship Country', datafield: 'ShipCountry' }
    ],
    groupable: true,
    groups: ['ShipCity']
});
            </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
            <td class="documentation-option-type-click">
                    <span id='Span25'>columns</span>
                </td>
                <td>
                    <span>Array</span>
                </td>
                <td>
                    []
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Sets the Grid columns.</p>
                        <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>columns</code> property specified.
                        </p>
                        <pre><code>
$("#jqxgrid").jqxGrid(
{
    source: source,
    columns: [
        { text: 'Ship Name', datafield: 'ShipName', width: 250 },
        { text: 'Shipped Date', datafield: 'ShippedDate', width: 230, cellsformat: 'D' },
        { text: 'Freight', datafield: 'Freight', width: 130, cellsformat: 'F2', cellsalign: 'right' },
        { text: 'Ship Address', datafield: 'ShipAddress', width: 350 },
        { text: 'Ship City', datafield: 'ShipCity', width: 100 },
        { text: 'Ship Country', datafield: 'ShipCountry', width: 100 }
    ]
});                        
                        </code></pre>
<br />
Column Properties:

<ul>
    <li>text - sets the column text.</li>
    <li>datafield - sets the column datafield.</li>
    <li>displayfield - sets the column's displayfield. The displayfield specifies the field in the data source from which the column to retrieve strings for display.</li>
    <li>sortable - enables or disables the sorting.</li>
    <li>filterable - enables or disables the filtering.</li>
    <li>hideable - enables or disables whether the column can be hidden.</li>
    <li>hidden - hides or shows the column.</li>
    <li>groupable - sets whether the user can group by this column.</li>
    <li>menu - sets whether the menu button is displayed when the user moves the mouse cursor over the column's header.</li>
    <li>exportable - determines whether the column will be exported when the Grid's export method is called.</li>
    <li>renderer - sets a custom column renderer. This can be used for changing the built-in rendering of the column's header.</li>
    <li>rendered - callback function that is called when the column is rendered. You can use it to set additional settings to the column's header element.
    <pre><code>
      rendered: function (columnHeaderElement) {
          // Your code here.                   
        }
    </code></pre>
    </li>
    <li>cellsrenderer - sets a custom rendering function. The cellsrenderer function is called when a cell in the column is rendered. You can use it to override the built-in cells rendering.
<pre><code>
{ text: 'Quantity', datafield: 'quantity', width: 70, cellsalign: 'right', columntype: 'numberinput',
      cellsrenderer: function (row, columnfield, value, defaulthtml, columnproperties) {
                if (value < 20) {
                    return '<span style="margin: 4px; float: ' + columnproperties.cellsalign + '; color: #ff0000;">' + value + '</span>';
                }
                else {
                    return '<span style="margin: 4px; float: ' + columnproperties.cellsalign + '; color: #008000;">' + value + '</span>';
                }
            }   
}
</code></pre>
    </li>
    <li>columntype - sets the column's type.<br /> Possible values:
        <ul>
           <li>'number' - readonly column with numbers.</li> 
           <li>'checkbox' - readonly checkbox when the editing is disabled. Checkbox input when editing is enabled.
               <ul>
                   <li>threestatecheckbox - determines whether the checkbox has an indeterminate state when the value is null. The default value is false.</li>
               </ul>
           </li>
           <li>'numberinput' - sets a number input editor as a default editor for the column. Requires: jqxnumberinput.js </li>
           <li>'dropdownlist' - sets a dropdownlist editor as a default editor for the column. Requires: jqxlistbox.js and jqxdropdownlist.js </li>
           <li>'combobox' - sets a combobox editor as a default editor for the column. Requires: jqxlistbox.js and jqxcombobox.js </li>
           <li>'datetimeinput' - sets a datetimeinput editor as a default editor for the column. Requires: jquery.global.js, jqxcalendar.js and jqxdatetimeinput.js </li>
        </ul>
    </li>
    <li>validation - sets a custom validation function. The Grid passes 2 parameters to it - edit cell and the cell's value. The function should return
    true or false, depending on the user's validation logic. It can also return a validation object with 2 fields - "result" - true or false, and "message" - validation string displayed to the users.
<pre><code>
{ text: 'Quantity', datafield: 'quantity', width: 70, cellsalign: 'right', columntype: 'numberinput',
    validation: function (cell, value) {
        if (value < 0 || value > 150) {
            return { result: false, message: "Quantity should be in the 0-150 interval" };
        }
        return true;
    }
}
</code></pre>
    </li>
    <li>createfilterwidget - sets a custom function which is called when a widget from the filter row is created. You can use this callback function to set up additional settings of the filter widget.
        The Grid passes 3 parameters to it - column, the column's HTML element and the filter widget.
<pre><code>
{
    text: 'Product', filtertype: 'checkedlist', datafield: 'productname', width: 220,
    createfilterwidget: function (column, columnElement, widget) {
        widget.jqxDropDownList({ dropDownWidth: 250 });
    }
},
</code></pre>
    </li>
   <li>initeditor - sets a custom function which is called when the cells editor is opened. The Grid passes 3 parameters to it - row index, cell value and the editor element. The function can be 
   used for adding some custom parameters to the editor.
<pre><code>
{ text: 'Quantity', datafield: 'quantity', width: 70, cellsalign: 'right', columntype: 'numberinput',
    initeditor: function (row, cellvalue, editor) {
        editor.jqxNumberInput({ decimalDigits: 0, digits: 3 });
    }
}
</code></pre>
    </li>
   <li>createeditor - sets a custom function which is called when the cells editor is created. The Grid passes 3 parameters to it - row index, cell value and the editor element. The function can be 
   used for adding some custom parameters to the editor.
<pre><code>
{ text: 'Product', columntype: 'dropdownlist', datafield: 'productname', width: 177,
    createeditor: function (row, cellvalue, editor) {
        var dataSource = ['Cappuccino', 'Caramel Latte', 'Caffe Espresso'];
        editor.jqxDropDownList({source: dataSource });
    }
}
</code></pre>
    </li>
   <li>cellbeginedit - sets a custom function which is called when a cell enters into edit mode. The Grid passes 3 parameters to it - row index, column data field and column type. The function can be 
   used for canceling the editing of a specific Grid cell. To cancel the editing, the function should return false.
<pre><code>
{ text: 'Product', columntype: 'dropdownlist', datafield: 'productname', width: 177,
    cellbeginedit: function (row, datafield, columntype) {
        if (row == 2)
            return false;
    }
}
</code></pre>
    </li>
   <li>cellendedit - sets a custom function which is called when a cell leaves the edit mode. The Grid passes 5 parameters to it - row index, column data field, column type, old cell value, new cell value. The function can be 
   used for canceling the changes of a specific Grid cell. To cancel the changes, the function should return false.
<pre><code>
{ text: 'Product', datafield: 'productname',
    cellendedit: function (row, datafield, columntype, oldvalue, newvalue) {
        if (newvalue == "My Value")
            return false;
    }
}
</code></pre>
    </li>
   <li>cellvaluechanging - sets a custom function which is called when a cell's value is going to be changed The Grid passes 5 parameters to it - row index, column data field, column type, old cell value, new cell value. The function can be 
    used for modifying the edited value.
<pre><code>
{
    text: 'First Name', columntype: 'textbox', datafield: 'firstname', width: 90,
    cellvaluechanging: function (row, datafield, columntype, oldvalue, newvalue) {
        return "$" + newvalue;
    }
},

     </code></pre>
   </li>
       <li>cellsformat - sets the formatting of the grid cells.<br />
<br />
Possible Number strings:
<br />
"d" - decimal numbers.
<br />
"f" - floating-point numbers.
<br />
"n" - integer numbers.
<br />
"c" - currency numbers.
<br />
"p" - percentage numbers.
<br />
<br />
For adding decimal places to the numbers, add a number after the formatting string.
<br />
For example: "c3" displays a number in this format $25.256 
<br />
Possible built-in Date formats:
<br />
<br />
// short date pattern
d: "M/d/yyyy",
<br />
// long date pattern
D: "dddd, MMMM dd, yyyy",
<br />
// short time pattern
t: "h:mm tt",
<br />
// long time pattern
T: "h:mm:ss tt",
<br />
// long date, short time pattern
f: "dddd, MMMM dd, yyyy h:mm tt",
<br />
// long date, long time pattern
F: "dddd, MMMM dd, yyyy h:mm:ss tt",
<br />
// month/day pattern
M: "MMMM dd",
<br />
// month/year pattern
Y: "yyyy MMMM",
<br />
// S is a sortable format that does not vary by culture
S: "yyyy\u0027-\u0027MM\u0027-\u0027dd\u0027T\u0027HH\u0027:\u0027mm\u0027:\u0027ss"
<br />
<br />  
Possible Date format strings:
<br />
<br />
"d"-the day of the month;<br />
"dd"-the day of the month;
<br />
"ddd"-the abbreviated name of the day of the week;<br />
"dddd"- the full name of the day of the week;<br />
"h"-the hour, using a 12-hour clock from 1 to 12;
<br />
"hh"-the hour, using a 12-hour clock from 01 to 12;
<br />
"H"-the hour, using a 24-hour clock from 0 to 23;<br />
"HH"- the hour, using a 24-hour clock from 00 to 23;
<br />
"m"-the minute, from 0 through 59;<br />
"mm"-the minutes,from 00 though59;<br />
"M"- the month, from 1 through 12;<br />
"MM"- the month, from 01 through 12;<br />
"MMM"-the abbreviated name of the month;<br />
"MMMM"-the full name of the month;<br />
"s"-the second, from 0 through 59;
<br />
"ss"-the second, from 00 through 59;
<br />
"t"- the first character of the AM/PM designator;<br />
"tt"-the AM/PM designator;
<br />
"y"- the year, from 0 to 99;
<br />
"yy"- the year, from 00 to 99;
<br />
"yyy"-the year, with a minimum of three digits;
<br />
"yyyy"-the year as a four-digit number;
<br />
"yyyyy"-the year as a four-digit number.
<br />
    </li>
    <li>aggregates<br /><br />
    <h4>Code Example</h4>
    <pre><code>{ text: 'Price', datafield: 'price', cellsalign: 'right', cellsformat: 'c2', aggregates: ['sum', 'avg'] }</code></pre>
    <br />
    Aggregate functions:  
                                <ul>
                                    <li>'avg' - Average aggregate</li>
                                    <li>'count' - Count aggregate</li>
                                    <li>'min' - Min aggregate</li>
                                    <li>'max' - Max aggregate</li>
                                    <li>'sum' - Sum aggregate</li>
                                    <li>'product' - Product aggregate</li>
                                    <li>'stdev' - Standard deviation on a sample.</li>
                                    <li>'stdevp' - Standard deviation on an entire population.</li>
                                    <li>'varp' - Variance on an entire population.</li>
                                    <li>'var' - Variance on a sample.</li>
                                 </ul>
                                 <br />
                                Custom Aggregate<br />
<pre><code>
aggregates: [{ 'In Stock':
    function (aggregatedValue, currentValue) {
        if (currentValue) {
            return aggregatedValue + 1;
        }

        return aggregatedValue;
    }
}
</code></pre>
<br />
Custom Aggregate which aggregates values from two columns
<br />
<pre><code>
{ text: 'Price', datafield: 'price', cellsalign: 'right', cellsformat: 'c2', aggregates: [{ '<b>Total</b>':
            function (aggregatedValue, currentValue, column, record) {
                var total = currentValue * parseInt(record['quantity']);
                return aggregatedValue + total;
            }
        }]                  
 }
</code></pre>
<br />
'In Stock' - the aggregate's display name.
The function has 2 params - the aggregated value and the current value. It should return an aggregated value.
    </li>
    <li>aggregatesrenderer - sets a custom rendering function of the column's aggregates. The function gets passed one parameter - the column's aggregates.              
<pre><code>
{ text: 'Quantity', datafield: 'quantity', width: 85, cellsalign: 'right', cellsformat: 'n2', aggregates: ['min', 'max'],
    aggregatesrenderer: function (aggregates) {
        var renderstring = "";
        $.each(aggregates, function (key, value) {
            var name = key == 'min' ? 'Min' : 'Max';
            renderstring += '<div style="position: relative; margin: 4px; overflow: hidden;">' + name + ': ' + value +'</div>';
        });
        return renderstring;
    }
}
</code></pre>
                      </li>
    <li>align - sets the column header's alignment to 'left', 'center' or 'right'</li>
    <li>cellsalign - sets the cells alignment to 'left', 'center' or 'right'.</li>
    <li>width - sets the column width.</li>
    <li>minwidth - sets the column's min width.</li>
    <li>maxwidth - sets the column's max width.</li>
    <li>resizable - enables or disables the column resizing.</li>
    <li>editable - enables or disables the cells editing</li>
    <li>classname - sets a custom CSS class for the column's header</li>
    <li>cellclassname - sets a custom CSS class for the column's cells</li>
    <li>pinned - pins or unpins the column. If the column is pinned, it will be displayed as frozen and will be visible when the user horizontally scrolls the grid contents.</li>
    <li>filtertype - sets the filter's type in the filter row when the showfilterrow property value is true.
       <br />
               <ul>
                            <li>'textbox' - input field.</li>
                            <li>'checkedlist' - dropdownlist with checkboxes that specify which records should be visible and hidden.</li>
                            <li>'list' - dropdownlist which specifies the visible records depending on the selection.</li>
                            <li>'number' - numeric input field.</li>
                            <li>'checkbox' - filter for boolean data.</li>
                            <li>'date' - filter for dates.</li>
                        </ul>
                        <br />            
    <pre><code>
      $("#jqxgrid").jqxGrid(
            {
                width: 670,
                source: dataAdapter,
                columnsresize: true,
                showfilterrow: true,
                filterable: true,
                theme: theme,
                selectionmode: 'singlecell',
                columns: [
                  { text: 'Name', columntype: 'textbox', datafield: 'name', width: 120 },
                  { text: 'Product', filtertype: 'checkedlist', datafield: 'productname', width: 160 },
                  { text: 'Available', datafield: 'available', columntype: 'checkbox', filtertype: 'bool', width: 67 },
                  { text: 'Ship Date', datafield: 'date', filtertype: 'date', width: 180, cellsalign: 'right', cellsformat: 'd' },
                  { text: 'Qty.', datafield: 'quantity', filtertype: 'number', width: 50, cellsalign: 'right' },
                  { text: 'Price', datafield: 'price', filtertype: 'number', cellsalign: 'right', cellsformat: 'c2' }
                ]
            });    
    </code></pre>
     </li>
<li>filtercondition - determines the filter condition of columns with filtertype equal to 'textbox' or 'number'. 
    // possible conditions for string filter: 'EMPTY', 'NOT_EMPTY', 'CONTAINS', 'CONTAINS_CASE_SENSITIVE',
// 'DOES_NOT_CONTAIN', 'DOES_NOT_CONTAIN_CASE_SENSITIVE', 'STARTS_WITH', 'STARTS_WITH_CASE_SENSITIVE',
// 'ENDS_WITH', 'ENDS_WITH_CASE_SENSITIVE', 'EQUAL', 'EQUAL_CASE_SENSITIVE', 'NULL', 'NOT_NULL'
// possible conditions for numeric filter: 'EQUAL', 'NOT_EQUAL', 'LESS_THAN', 'LESS_THAN_OR_EQUAL', 'GREATER_THAN', 'GREATER_THAN_OR_EQUAL', 'NULL', 'NOT_NULL'
<pre><code>
$("#jqxgrid").jqxGrid(
{
    source: dataAdapter,
    showfilterrow: true,
    filterable: true,
    columns: [
        { text: 'Name', columntype: 'textbox', filtertype: 'textbox', filtercondition: 'starts_with', datafield: 'name', width: 120 },
        { text: 'Product', filtertype: 'checkedlist', datafield: 'productname', width: 160 },
        { text: 'Available', datafield: 'available', columntype: 'checkbox', filtertype: 'bool', width: 67 },
        { text: 'Ship Date', datafield: 'date', filtertype: 'date', width: 180, cellsalign: 'right', cellsformat: 'd' },
        { text: 'Qty.', datafield: 'quantity', filtertype: 'number', filtercondition: 'equal', width: 50, cellsalign: 'right' },
        { text: 'Price', datafield: 'price', filtertype: 'number', cellsalign: 'right', cellsformat: 'c2' }
    ]
});

     </code></pre>
</li>
</ul>
                    </div>
                </td>
            </tr>
            <tr>
            <td class="documentation-option-type-click">
                    <span id='Span26'>selectedrowindex</span>
                </td>
                <td>
                    <span>Number</span>
                </td>
                <td>
                    -1
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>(requires jqxgrid.selection.js)</p>
                        <p>
                            Selects a row at a specified index.</p>
                         <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>selectedrowindex</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ selectedrowindex: 1}); </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
            <td class="documentation-option-type-click">
                    <span id='Span28'>selectedrowindexes</span>
                </td>
                <td>
                    <span>Array</span>
                </td>
                <td>
                    []
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>(requires jqxgrid.selection.js)</p>
                        <p>
                            Selects single or multiple rows.</p>
                         <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>selectedrowindexes</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ selectedrowindexes: [0, 1, 2]}); </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
            <td class="documentation-option-type-click">
                    <span id='Span29'>source</span>
                </td>
                <td>
                    <span>Object</span>
                </td>
                <td>
                    {}
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>(requires jqxdata.js)</p>
<br />
 The source object represents a set of key/value pairs.
<br />
url: A string containing the URL to which the request is sent.
<br />
data: Data to be sent to the server.
<br />
localdata: data array or data string pointing to a local data source.
<br />
datatype: the data's type. Possible values: 'xml', 'json', 'jsonp', 'tsv', 'csv', 'local', 'array', 'observablearray'.
<br />
type: The type of request to make ("POST" or "GET"), default is "GET".
<br />
id: A string containing the Id data field.
<br />
root: A string describing where the data begins and all other loops begin from this element.
<br />
record: A string describing the information for a particular record.
<br />
<br />

<pre style="font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; color: #000000; line-height: 14px;padding: 5px; overflow: auto; width: 100%"><code>var source =
{
    datatype: &quot;xml&quot;,
    datafields: [
        { name: 'ShippedDate', map: 'm\\:properties&gt;d\\:ShippedDate', type: 'date' },
        { name: 'Freight', map: 'm\\:properties&gt;d\\:Freight', type: 'float' },
        { name: 'ShipName', map: 'm\\:properties&gt;d\\:ShipName' },
        { name: 'ShipAddress', map: 'm\\:properties&gt;d\\:ShipAddress' },
        { name: 'ShipCity', map: 'm\\:properties&gt;d\\:ShipCity' },
        { name: 'ShipCountry', map: 'm\\:properties&gt;d\\:ShipCountry' }
    ],
    root: &quot;entry&quot;,
    record: &quot;content&quot;,
    id: 'm\\:properties&gt;d\\:OrderID',
    url: 'orders.xml'
};
XML
  &lt;entry&gt;
    &lt;id&gt;http://services.odata.org/Northwind/Northwind.svc/Orders(10248)&lt;/id&gt;
    &lt;title type=&quot;text&quot;&gt;&lt;/title&gt;
    &lt;updated&gt;2011-12-01T11:55:06Z&lt;/updated&gt;
    &lt;author&gt;
      &lt;name /&gt;
    &lt;/author&gt;
    &lt;link rel=&quot;edit&quot; title=&quot;Order&quot; href=&quot;Orders(10248)&quot; /&gt;
    &lt;link rel=&quot;http://schemas.microsoft.com/ado/2007/08/dataservices/related/Customer&quot; type=&quot;application/atom+xml;type=entry&quot; title=&quot;Customer&quot; href=&quot;Orders(10248)/Customer&quot; /&gt;
    &lt;link rel=&quot;http://schemas.microsoft.com/ado/2007/08/dataservices/related/Employee&quot; type=&quot;application/atom+xml;type=entry&quot; title=&quot;Employee&quot; href=&quot;Orders(10248)/Employee&quot; /&gt;
    &lt;link rel=&quot;http://schemas.microsoft.com/ado/2007/08/dataservices/related/Order_Details&quot; type=&quot;application/atom+xml;type=feed&quot; title=&quot;Order_Details&quot; href=&quot;Orders(10248)/Order_Details&quot; /&gt;
    &lt;link rel=&quot;http://schemas.microsoft.com/ado/2007/08/dataservices/related/Shipper&quot; type=&quot;application/atom+xml;type=entry&quot; title=&quot;Shipper&quot; href=&quot;Orders(10248)/Shipper&quot; /&gt;
    &lt;category term=&quot;NorthwindModel.Order&quot; scheme=&quot;http://schemas.microsoft.com/ado/2007/08/dataservices/scheme&quot; /&gt;
    &lt;content type=&quot;application/xml&quot;&gt;
      &lt;m:properties&gt;
        &lt;d:OrderID m:type=&quot;Edm.Int32&quot;&gt;10248&lt;/d:OrderID&gt;
        &lt;d:CustomerID&gt;VINET&lt;/d:CustomerID&gt;
        &lt;d:EmployeeID m:type=&quot;Edm.Int32&quot;&gt;5&lt;/d:EmployeeID&gt;
        &lt;d:OrderDate m:type=&quot;Edm.DateTime&quot;&gt;1996-07-04T00:00:00&lt;/d:OrderDate&gt;
        &lt;d:RequiredDate m:type=&quot;Edm.DateTime&quot;&gt;1996-08-01T00:00:00&lt;/d:RequiredDate&gt;
        &lt;d:ShippedDate m:type=&quot;Edm.DateTime&quot;&gt;1996-07-16T00:00:00&lt;/d:ShippedDate&gt;
        &lt;d:ShipVia m:type=&quot;Edm.Int32&quot;&gt;3&lt;/d:ShipVia&gt;
        &lt;d:Freight m:type=&quot;Edm.Decimal&quot;&gt;32.3800&lt;/d:Freight&gt;
        &lt;d:ShipName&gt;Vins et alcools Chevalier&lt;/d:ShipName&gt;
        &lt;d:ShipAddress&gt;59 rue de l'Abbaye&lt;/d:ShipAddress&gt;
        &lt;d:ShipCity&gt;Reims&lt;/d:ShipCity&gt;
        &lt;d:ShipRegion m:null=&quot;true&quot; /&gt;
        &lt;d:ShipPostalCode&gt;51100&lt;/d:ShipPostalCode&gt;
        &lt;d:ShipCountry&gt;France&lt;/d:ShipCountry&gt;
      &lt;/m:properties&gt;
    &lt;/content&gt;
  &lt;/entry&gt;
  &lt;entry&gt;
    &lt;id&gt;http://services.odata.org/Northwind/Northwind.svc/Orders(10249)&lt;/id&gt;
    &lt;title type=&quot;text&quot;&gt;&lt;/title&gt;
    &lt;updated&gt;2011-12-01T11:55:06Z&lt;/updated&gt;
    &lt;author&gt;
      &lt;name /&gt;
    &lt;/author&gt;
    &lt;link rel=&quot;edit&quot; title=&quot;Order&quot; href=&quot;Orders(10249)&quot; /&gt;
    &lt;link rel=&quot;http://schemas.microsoft.com/ado/2007/08/dataservices/related/Customer&quot; type=&quot;application/atom+xml;type=entry&quot; title=&quot;Customer&quot; href=&quot;Orders(10249)/Customer&quot; /&gt;
    &lt;link rel=&quot;http://schemas.microsoft.com/ado/2007/08/dataservices/related/Employee&quot; type=&quot;application/atom+xml;type=entry&quot; title=&quot;Employee&quot; href=&quot;Orders(10249)/Employee&quot; /&gt;
    &lt;link rel=&quot;http://schemas.microsoft.com/ado/2007/08/dataservices/related/Order_Details&quot; type=&quot;application/atom+xml;type=feed&quot; title=&quot;Order_Details&quot; href=&quot;Orders(10249)/Order_Details&quot; /&gt;
    &lt;link rel=&quot;http://schemas.microsoft.com/ado/2007/08/dataservices/related/Shipper&quot; type=&quot;application/atom+xml;type=entry&quot; title=&quot;Shipper&quot; href=&quot;Orders(10249)/Shipper&quot; /&gt;
    &lt;category term=&quot;NorthwindModel.Order&quot; scheme=&quot;http://schemas.microsoft.com/ado/2007/08/dataservices/scheme&quot; /&gt;
    &lt;content type=&quot;application/xml&quot;&gt;
      &lt;m:properties&gt;
        &lt;d:OrderID m:type=&quot;Edm.Int32&quot;&gt;10249&lt;/d:OrderID&gt;
        &lt;d:CustomerID&gt;TOMSP&lt;/d:CustomerID&gt;
        &lt;d:EmployeeID m:type=&quot;Edm.Int32&quot;&gt;6&lt;/d:EmployeeID&gt;
        &lt;d:OrderDate m:type=&quot;Edm.DateTime&quot;&gt;1996-07-05T00:00:00&lt;/d:OrderDate&gt;
        &lt;d:RequiredDate m:type=&quot;Edm.DateTime&quot;&gt;1996-08-16T00:00:00&lt;/d:RequiredDate&gt;
        &lt;d:ShippedDate m:type=&quot;Edm.DateTime&quot;&gt;1996-07-10T00:00:00&lt;/d:ShippedDate&gt;
        &lt;d:ShipVia m:type=&quot;Edm.Int32&quot;&gt;1&lt;/d:ShipVia&gt;
        &lt;d:Freight m:type=&quot;Edm.Decimal&quot;&gt;11.6100&lt;/d:Freight&gt;
        &lt;d:ShipName&gt;Toms Spezialit&#228;ten&lt;/d:ShipName&gt;
        &lt;d:ShipAddress&gt;Luisenstr. 48&lt;/d:ShipAddress&gt;
        &lt;d:ShipCity&gt;M&#252;nster&lt;/d:ShipCity&gt;
        &lt;d:ShipRegion m:null=&quot;true&quot; /&gt;
        &lt;d:ShipPostalCode&gt;44087&lt;/d:ShipPostalCode&gt;
        &lt;d:ShipCountry&gt;Germany&lt;/d:ShipCountry&gt;
      &lt;/m:properties&gt;
    &lt;/content&gt;
  &lt;/entry&gt;
</code></pre>
<br />
datafields: An array describing the fields in a particular record. Each datafield must define the following members:
<br />
name - A string containing the data field's name.
<br />
type(optional) - A string containing the data field's type. Possible values: 'string', 'date', 'number', 'bool'.
<br />
format(optional) - Sets the data formatting. By setting the format, the jqxDataAdapter plug-in will try to format the data before loading it. 
<br />
Example: { name: 'SubmitDate', type: 'date', format: "yyyy-MM-ddTHH:mm:ss-HH:mm" }
<br />
map(optional) - A mapping to the data field. 
<br />
<br />
Example with XML data:
<br />
<br />

{ name: 'CompanyName', map: 'm\\:properties>d\\:CompanyName' }  
<br />
XML
<pre style="font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; color: #000000; line-height: 14px;padding: 5px; overflow: auto; width: 100%"><code> &lt;content type=&quot;application/xml&quot;&gt;
    &lt;m:properties&gt;
      &lt;d:CustomerID&gt;ALFKI&lt;/d:CustomerID&gt;
      &lt;d:CompanyName&gt;Alfreds Futterkiste&lt;/d:CompanyName&gt;
      &lt;d:ContactName&gt;Maria Anders&lt;/d:ContactName&gt;
      &lt;d:ContactTitle&gt;Sales Representative&lt;/d:ContactTitle&gt;
      &lt;d:Address&gt;Obere Str. 57&lt;/d:Address&gt;
      &lt;d:City&gt;Berlin&lt;/d:City&gt;
      &lt;d:Region m:null=&quot;true&quot; /&gt;
      &lt;d:PostalCode&gt;12209&lt;/d:PostalCode&gt;
      &lt;d:Country&gt;Germany&lt;/d:Country&gt;
      &lt;d:Phone&gt;030-0074321&lt;/d:Phone&gt;
      &lt;d:Fax&gt;030-0076545&lt;/d:Fax&gt;
    &lt;/m:properties&gt;
  &lt;/content&gt;
</code></pre> 
<br />
Example with nested JSON data.
<br />
<pre style="font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; color: #000000; line-height: 14px;padding: 5px; overflow: auto; width: 100%"><code>var data = [{ &quot;empName&quot;: &quot;test&quot;, &quot;age&quot;: &quot;67&quot;, &quot;department&quot;: { &quot;id&quot;: &quot;1234&quot;, &quot;name&quot;: &quot;Sales&quot; }, &quot;author&quot;: &quot;ravi&quot;}];

// prepare the data
var source =
{
    datatype: &quot;json&quot;,
    datafields: [
        { name: 'empName' },
        { name: 'age' },
        { name: 'id', map: 'department&gt;id' },
        { name: 'name', map: 'department&gt;name' },
        { name: 'author' }
    ],
    localdata: data
};
var dataAdapter = new $.jqx.dataAdapter(source);
</code></pre>
<br />
Example #2 with nested JSON data.
<br /><br />
<pre style="font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; color: #000000; line-height: 14px;padding: 5px; overflow: auto; width: 100%"><code>var data = [
    {
        &quot;state&quot;: {
            &quot;id&quot;: &quot;x526&quot;,
            &quot;city&quot;: {
                &quot;name&quot;: &quot;Beverly Hills&quot;,
                &quot;id&quot;: 90210,
                &quot;value&quot;: &quot;Beverly Hills&quot;
            }
        }
    }
];

var source = {
    datatype: 'json',
    localdata: data,
    datafields:
    [
        {
            name: 'cityName', map: 'state&gt;city&gt;name'
        }
    ]
};

var dataAdapter = new $.jqx.dataAdapter(source);
</code></pre>
<br />
<br />
id - determines the id of a record in a foreign collection which should match to the record's name in the source collection.
<br />
text - determines the display field from the foreign collection.
<br />
source - determines the foreign collection associated to the data field. The expected value is an array.
<br /><br />
Example with using the id, text and source. This functionality allows you to join two or more data sources.
<br /><br />
<pre style="font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; color: #000000; line-height: 14px;padding: 5px; overflow: auto; width: 100%"><code>// load records from employees.xml into a dataAdapter.
var employeesSource =
    {
        datatype: &quot;xml&quot;,
        datafields: [
            { name: 'FirstName' },
            { name: 'LastName' }
        ],
        root: &quot;Employees&quot;,
        record: &quot;Employee&quot;,
        id: 'EmployeeID',
        url: &quot;../sampledata/employees.xml&quot;,
        async: false
    };
    // create dataAdapter from the employeesSource object.
    var employeesAdapter = new $.jqx.dataAdapter(employeesSource, {
    autoBind: true,
    beforeLoadComplete: function (records) {
        var data = new Array();
        // update the loaded records. Dynamically add EmployeeName field. 
        for (var i = 0; i &lt; records.length; i++) {
            var employee = records[i];
            employee.EmployeeName = employee.FirstName + &quot; &quot; + employee.LastName;
            data.push(employee);
        }
        return data;
    }
});

// load records from orders.xml into a dataAdapter.
var ordersSource =
{
    datatype: &quot;xml&quot;,
    datafields: [
        // id - determines the id of a record in the foreign collection(employees.xml) which should match to the record's name in the source collection(orders.xml). The 'EmployeeID' from the employees.xml must match to 'EmployeeID' from the orders.xml.
        // text - determines the display field from the foreign collection. We set it to 'EmployeeName' because we want to display the employee names in that column.
        // source - determines the foreign collection. In this scenario, that's the employees data source.
        { name: 'EmployeeID', map: 'm\\:properties&gt;d\\:EmployeeID', text: 'EmployeeName', id: 'EmployeeID', source: employeesAdapter.records },
        { name: 'ShippedDate', map: 'm\\:properties&gt;d\\:ShippedDate', type: 'date' },
        { name: 'Freight', map: 'm\\:properties&gt;d\\:Freight', type: 'float' },
        { name: 'ShipName', map: 'm\\:properties&gt;d\\:ShipName' },
        { name: 'ShipAddress', map: 'm\\:properties&gt;d\\:ShipAddress' },
        { name: 'ShipCity', map: 'm\\:properties&gt;d\\:ShipCity' },
        { name: 'ShipCountry', map: 'm\\:properties&gt;d\\:ShipCountry' }
    ],
    root: &quot;entry&quot;,
    record: &quot;content&quot;,
    id: 'm\\:properties&gt;d\\:OrderID',
    url: &quot;../sampledata/orders.xml&quot;,
    pager: function (pagenum, pagesize, oldpagenum) {
        // callback called when a page or page size is changed.
    }
};
var ordersAdapter = new $.jqx.dataAdapter(ordersSource);
</code></pre>
<br />
pagenum - determines the initial page number when paging is enabled.
<br />
pagesize - determines the page size when paging is enabled.
<br />
pager - callback function called when the current page or page size is changed.
<br />
<pre style="font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; color: #000000; line-height: 14px;padding: 5px; overflow: auto; width: 100%"><code>pager: function (pagenum, pagesize, oldpagenum) {
}
</code></pre>
<br />
sortcolumn - determines the initial sort column. The expected value is a data field name.
<br />
sortdirection - determines the sort order. The expected value is 'asc' for (A to Z) sorting or 'desc' for (Z to A) sorting.
<br />
sort - callback function called when the sort column or sort order is changed.
<br />
<pre style="font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; color: #000000; line-height: 14px;padding: 5px; overflow: auto; width: 100%"><code>sort: function (column, direction) {
}
</code></pre>
<br />
filter - callback function called when a filter is applied or removed.
<br />
<pre style="font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; color: #000000; line-height: 14px;padding: 5px; overflow: auto; width: 100%"><code>filter: function(filters, recordsArray)
{
}
</code></pre>
<br />
addrow - callback function, called when a new row is/are added. If multiple rows are added, the rowid and rowdata parameters are arrays of row ids and rows.
<br />
<pre style="font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; color: #000000; line-height: 14px;padding: 5px; overflow: auto; width: 100%"><code>addrow: function (rowid, rowdata, position, commit) {
    // synchronize with the server - send insert command
    // call commit with parameter true if the synchronization with the server is successful 
    //and with parameter false if the synchronization failed.
    commit(true);
}
</code></pre>
<br />
deleterow - callback function, called when a row is deleted. If multiple rows are deleted, the rowid parameter is an array of row ids.
<br />
<pre style="font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; color: #000000; line-height: 14px;padding: 5px; overflow: auto; width: 100%"><code>deleterow: function (rowid, commit) {
    // synchronize with the server - send delete command
    // call commit with parameter true if the synchronization with the server is successful 
    //and with parameter false if the synchronization failed.
    commit(true);
}
</code></pre> 
<br />
updaterow - callback function, called when a row is updated. If multiple rows are added, the rowid and rowdata parameters are arrays of row ids and rows. 
<br />
Example:
<br />
<pre style="font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; color: #000000; line-height: 14px;padding: 5px; overflow: auto; width: 100%"><code>updaterow: function (rowid, newdata, commit) {
    // synchronize with the server - send update command
    // call commit with parameter true if the synchronization with the server is successful 
    // and with parameter false if the synchronization failed.
    commit(true);
}
</code></pre>
<br />
processdata - extend the default data object sent to the server.
<br />
<pre style="font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; color: #000000; line-height: 14px;padding: 5px; overflow: auto; width: 100%"><code>var source =
{
    datatype: &quot;jsonp&quot;,
    datafields: [
        { name: 'countryName' },
        { name: 'name' },
        { name: 'population', type: 'float' },
        { name: 'continentCode' }
    ],
    url: &quot;http://ws.geonames.org/searchJSON&quot;,
    processdata: function (data) {
        data.featureClass = &quot;P&quot;;;
        data.style = &quot;full&quot;;
        data.maxRows = 50;
    }
};
</code></pre>
<br />
formatdata - Before the data is sent to the server, you can fully override it by using the 'formatdata' function of the source object. The result that the 'formatdata' function returns is actually what will be sent to the server.
<pre style="font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; color: #000000; line-height: 14px;padding: 5px; overflow: auto; width: 100%"><code>var source =
{
    datatype: &quot;jsonp&quot;,
    datafields: [
        { name: 'countryName' },
        { name: 'name' },
        { name: 'population', type: 'float' },
        { name: 'continentCode' }
    ],
    url: &quot;http://ws.geonames.org/searchJSON&quot;,
    data: {
        featureClass: &quot;P&quot;,
        style: &quot;full&quot;,
        maxRows: 50
    },
    formatdata: function (data) {
        return &quot;my data&quot;;
    }
};
</code></pre>
<br />
contenttype: Use this option, If you want to explicitly pass in a content-type. Default is "application/x-www-form-urlencoded".
<br />
The example code below illustrates how to create jqxDataAdapter from a source object.
<br />
<pre style="font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; color: #000000; line-height: 14px;padding: 5px; overflow: auto; width: 100%"><code>var dataAdapter = new $.jqx.dataAdapter(source, {
    loadComplete: function (data) 
    {
        // data is loaded. 
    },
    loadError: function (xhr, status, error)
    { 
       // data is not loaded.
    }    
});
</code></pre>
<br />
If you on the Grid to remote data source using asynchronous requests( that is by default when you specify url in the source object and you didn't set the async field to false), then make sure that you call any method or set a property once the data is loaded. To ensure that you call your code when the Grid is loaded with data, use the Grid's ready callback function or on to the 'bindingcomplete' event before the Grid's initialization and call your code inside the event handler. 
<br />
Example with 'ready' callback:
<br />
<pre style="font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; color: #000000; line-height: 14px;padding: 5px; overflow: auto; width: 100%"><code>var url = &quot;../sampledata/beverages.txt&quot;;

// prepare the data
var source =
{
    datatype: &quot;json&quot;,
    datafields: [
        { name: 'name' },
        { name: 'type' },
        { name: 'calories', type: 'int' },
        { name: 'totalfat' },
        { name: 'protein' }
    ],
    id: 'id',
    url: url
};
var dataAdapter = new $.jqx.dataAdapter(source);

$(&quot;#jqxgrid&quot;).jqxGrid(
{
    width: 400,
    source: dataAdapter,
    ready: function () {
        $(&quot;#jqxgrid&quot;).jqxGrid('hidecolumn', 'name');
    },
    columnsresize: true,
    columns: [
        { text: 'Name', datafield: 'name', width: 250 },
        { text: 'Beverage Type', datafield: 'type', width: 250 },
        { text: 'Calories', datafield: 'calories', width: 180 },
        { text: 'Total Fat', datafield: 'totalfat', width: 120 },
        { text: 'Protein', datafield: 'protein', minwidth: 120 }
    ]
}); 
</code></pre>
<br />
Example with 'bindingcomplete':
<br />
<pre style="font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; color: #000000; line-height: 14px;padding: 5px; overflow: auto; width: 100%"><code>var url = &quot;../sampledata/beverages.txt&quot;;

// prepare the data
var source =
{
    datatype: &quot;json&quot;,
    datafields: [
        { name: 'name' },
        { name: 'type' },
        { name: 'calories', type: 'int' },
        { name: 'totalfat' },
        { name: 'protein' }
    ],
    id: 'id',
    url: url
};
var dataAdapter = new $.jqx.dataAdapter(source);

$(&quot;#jqxgrid&quot;).on('bindingcomplete', function (event) {
    $(&quot;#jqxgrid&quot;).jqxGrid('hidecolumn', 'name');
});

$(&quot;#jqxgrid&quot;).jqxGrid(
{
    width: 400,
    source: dataAdapter,
    columnsresize: true,
    columns: [
        { text: 'Name', datafield: 'name', width: 250 },
        { text: 'Beverage Type', datafield: 'type', width: 250 },
        { text: 'Calories', datafield: 'calories', width: 180 },
        { text: 'Total Fat', datafield: 'totalfat', width: 120 },
        { text: 'Protein', datafield: 'protein', minwidth: 120 }
    ]
});
</code></pre>
<br />
Initialize a Grid with the source property specified.
<br /><br />
<b>Bind the Grid to an array</b>
<br /><br />
The data member is array. The datatype member is set to "array".
<br />
<pre style="font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; color: #000000; line-height: 14px;padding: 5px; overflow: auto; width: 100%"><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;title id='Description'&gt;Grid populated from Array.&lt;/title&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;../../jqwidgets/styles/jqx.base.css&quot; type=&quot;text/css&quot; /&gt;
    &lt;script type=&quot;text/javascript&quot; src=&quot;../../scripts/jquery-1.6.2.min.js&quot;&gt;&lt;/script&gt;
    &lt;script type=&quot;text/javascript&quot; src=&quot;../../jqwidgets/jqxcore.js&quot;&gt;&lt;/script&gt;
    &lt;script type=&quot;text/javascript&quot; src=&quot;../../jqwidgets/jqxbuttons.js&quot;&gt;&lt;/script&gt;
    &lt;script type=&quot;text/javascript&quot; src=&quot;../../jqwidgets/jqxscrollbar.js&quot;&gt;&lt;/script&gt;
    &lt;script type=&quot;text/javascript&quot; src=&quot;../../jqwidgets/jqxmenu.js&quot;&gt;&lt;/script&gt;
    &lt;script type=&quot;text/javascript&quot; src=&quot;../../jqwidgets/jqxgrid.js&quot;&gt;&lt;/script&gt;
    &lt;script type=&quot;text/javascript&quot; src=&quot;../../jqwidgets/jqxgrid.selection.js&quot;&gt;&lt;/script&gt;
    &lt;script type=&quot;text/javascript&quot; src=&quot;../../jqwidgets/jqxdata.js&quot;&gt;&lt;/script&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
        $(document).ready(function () {
            // prepare the data
            var data = new Array();
            var firstNames =
            [
                &quot;Andrew&quot;, &quot;Nancy&quot;, &quot;Shelley&quot;, &quot;Regina&quot;, &quot;Yoshi&quot;, &quot;Antoni&quot;, &quot;Mayumi&quot;, &quot;Ian&quot;, &quot;Peter&quot;, &quot;Lars&quot;, &quot;Petra&quot;, &quot;Martin&quot;, &quot;Sven&quot;, &quot;Elio&quot;, &quot;Beate&quot;, &quot;Cheryl&quot;, &quot;Michael&quot;, &quot;Guylene&quot;
            ];
            var lastNames =
            [
                &quot;Fuller&quot;, &quot;Davolio&quot;, &quot;Burke&quot;, &quot;Murphy&quot;, &quot;Nagase&quot;, &quot;Saavedra&quot;, &quot;Ohno&quot;, &quot;Devling&quot;, &quot;Wilson&quot;, &quot;Peterson&quot;, &quot;Winkler&quot;, &quot;Bein&quot;, &quot;Petersen&quot;, &quot;Rossi&quot;, &quot;Vileid&quot;, &quot;Saylor&quot;, &quot;Bjorn&quot;, &quot;Nodier&quot;
            ];
            var productNames =
            [
                &quot;Black Tea&quot;, &quot;Green Tea&quot;, &quot;Caffe Espresso&quot;, &quot;Doubleshot Espresso&quot;, &quot;Caffe Latte&quot;, &quot;White Chocolate Mocha&quot;, &quot;Cramel Latte&quot;, &quot;Caffe Americano&quot;, &quot;Cappuccino&quot;, &quot;Espresso Truffle&quot;, &quot;Espresso con Panna&quot;, &quot;Peppermint Mocha Twist&quot;
            ];
            var priceValues =
            [
                &quot;2.25&quot;, &quot;1.5&quot;, &quot;3.0&quot;, &quot;3.3&quot;, &quot;4.5&quot;, &quot;3.6&quot;, &quot;3.8&quot;, &quot;2.5&quot;, &quot;5.0&quot;, &quot;1.75&quot;, &quot;3.25&quot;, &quot;4.0&quot;
            ];
            for (var i = 0; i &lt; 50; i++) {
                var row = {};
                var productindex = Math.floor(Math.random() * productNames.length);
                var price = parseFloat(priceValues[productindex]);
                var quantity = 1 + Math.round(Math.random() * 10);
                row[&quot;firstname&quot;] = firstNames[Math.floor(Math.random() * firstNames.length)];
                row[&quot;lastname&quot;] = lastNames[Math.floor(Math.random() * lastNames.length)];
                row[&quot;productname&quot;] = productNames[productindex];
                row[&quot;price&quot;] = price;
                row[&quot;quantity&quot;] = quantity;
                row[&quot;total&quot;] = price * quantity;
                data[i] = row;
            }
            var source =
            {
                localdata: data,
                datatype: &quot;array&quot;
            };
            var dataAdapter = new $.jqx.dataAdapter(source, {
                downloadComplete: function (data, status, xhr) { },
                loadComplete: function (data) { },
                loadError: function (xhr, status, error) { }
            });
            $(&quot;#jqxgrid&quot;).jqxGrid(
            {
                width: 670,
                source: dataAdapter,
                columns: [
                  { text: 'First Name', datafield: 'firstname', width: 100 },
                  { text: 'Last Name', datafield: 'lastname', width: 100 },
                  { text: 'Product', datafield: 'productname', width: 180 },
                  { text: 'Quantity', datafield: 'quantity', width: 80, cellsalign: 'right' },
                  { text: 'Unit Price', datafield: 'price', width: 90, cellsalign: 'right', cellsformat: 'c2' },
                  { text: 'Total', datafield: 'total', width: 100, cellsalign: 'right', cellsformat: 'c2' }
                ]
            });
        });
    &lt;/script&gt;
&lt;/head&gt;
&lt;body class='default'&gt;
    &lt;div id='jqxWidget' style=&quot;font-size: 13px; font-family: Verdana; float: left;&quot;&gt;
        &lt;div id=&quot;jqxgrid&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
                    </div>
                </td>
            </tr>
            <tr>
            <td class="documentation-option-type-click">
                    <span id='Span30'>updatedelay</span>
                </td>
                <td>
                    <span>Number</span>
                </td>
                <td>
                    0
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Sets the rendering update delay. This could be used for deferred scrolling scenarios.</p>
                         <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>updatedelay</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ updatedelay: 5}); </code></pre>
                    </div>
                </td>
            </tr>
         <tr>
            <td class="documentation-option-type-click">
                    <span id='Span36'>virtualmode</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    false
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Enables or disables the virtual data mode.</p>
                         <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>virtualmode</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ virtualmode: true}); </code></pre>
                    </div>
                </td>
               </tr>
         <tr>
            <td class="documentation-option-type-click">
                    <span id='Span39'>columnsmenu</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    true
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>(requires jqxmenu.js)</p>
                        <p>
                            Enables or disables the columns dropdown menu.</p>
                         <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>columnsmenu</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ columnsmenu: false}); </code></pre>
                    </div>
                </td>
            </tr>
        <tr>
            <td class="documentation-option-type-click">
                    <span id='Span151'>columnsresize</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    false
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>(requires jqxgrid.columnsresize.js)</p>
                        <p>
                            Enables or disables the columns resizing.</p>
                         <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>columnsresize</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ columnsresize: false}); </code></pre>
                    </div>
                </td>
            </tr>
          <tr>
            <td class="documentation-option-type-click">
                    <span id='Span185'>columnsreorder</span>
                </td>
                <td>
                    <span>Boolean</span>
                </td>
                <td>
                    false
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>(requires jqxgrid.columnsreorder.js)</p>
                        <p>
                            Enables or disables the columns reordering.</p>
                         <h4>
                            Code example</h4>
                        <p>
                            Sets the <code>columnsreorder</code> property.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ columnsreorder: true}); </code></pre>
                    </div>
                </td>
            </tr>
        <tr>
            <td class="documentation-option-type-click">
                    <span id='Span85'>rendered</span>
                </td>
                <td>
                    <span>function</span>
                </td>
                <td>
                    null
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Callback function which is called when the jqxGrid's render function is called either internally or not.
                        </p>
                         <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>rendered</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ rendered: function(){//to do}}); </code></pre>
                    </div>
                </td>
            </tr>
          <tr>
            <td class="documentation-option-type-click">
                    <span id='Span99'>renderstatusbar</span>
                </td>
                <td>
                    <span>function</span>
                </td>
                <td>
                    null
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Callback function which allows you to customize the rendering of the Grid's statusbar. 
                        </p>
                         <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>renderstatusbar</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ renderstatusbar: function(statusbar){//to do}}); </code></pre>
                    </div>
                </td>
            </tr>
         <tr>
            <td class="documentation-option-type-click">
                    <span id='Span100'>rendertoolbar</span>
                </td>
                <td>
                    <span>function</span>
                </td>
                <td>
                    null
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Callback function which allows you to customize the rendering of the Grid's toolbar. 
                        </p>
                         <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>rendertoolbar</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ rendertoolbar: function(toolbar){//to do}}); </code></pre>
                    </div>
                </td>
            </tr>
         <tr>
            <td class="documentation-option-type-click">
                    <span id='Span41'>sorttogglestates</span>
                </td>
                <td>
                    <span>String</span>
                </td>
                <td>
                    2
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>(requires jqxgrid.sort.js)</p>
                        <p>
                            Sets the sort toggle states.            
                            <br />
                            changes the sort state when the user clickes a column header.
                            <br /> 0 - disables toggling.
                            <br /> 1 - enables togging. Click on a column toggles the sort direction.
                            <br /> 2 - enables remove sorting option.</p>
                         <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>sorttogglestates</code> property specified.
                        </p>
                        <pre><code>$('#grid').jqxGrid({ sorttogglestates: 1}); </code></pre>
                    </div>
                </td>
            </tr>
           <tr>
            <td class="documentation-option-type-click">
                    <span id='Span42'>rendergridrows</span>
                </td>
                <td>
                    <span>function</span>
                </td>
                <td>
                    null
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                        This is a function called when the grid is used in virtual mode. The function should return an array of rows which will be rendered by the Grid.</p>
                         <h4>
                            Code example</h4>
                        <p>
                            Initialize a Grid with the <code>rendergridrows</code> function specified.
                        </p>
                        <pre><code>
// prepare the data
var data = new Array();
var firstNames =
[
    "Andrew", "Nancy", "Shelley", "Regina", "Yoshi", "Antoni", "Mayumi", "Ian", "Peter", "Lars", "Petra", "Martin", "Sven", "Elio", "Beate", "Cheryl", "Michael", "Guylene"
];

var lastNames =
[
    "Fuller", "Davolio", "Burke", "Murphy", "Nagase", "Saavedra", "Ohno", "Devling", "Wilson", "Peterson", "Winkler", "Bein", "Petersen", "Rossi", "Vileid", "Saylor", "Bjorn", "Nodier"
];

var productNames =
[
    "Black Tea", "Green Tea", "Caffe Espresso", "Doubleshot Espresso", "Caffe Latte", "White Chocolate Mocha", "Cramel Latte", "Caffe Americano", "Cappuccino", "Espresso Truffle", "Espresso con Panna", "Peppermint Mocha Twist"
];

var priceValues =
[
    "2.25", "1.5", "3.0", "3.3", "4.5", "3.6", "3.8", "2.5", "5.0", "1.75", "3.25", "4.0"
];

// generate sample data.
var generatedata = function (startindex, endindex) {
    var data = {};
    for (var i = startindex; i < endindex; i++) {
        var row = {};
        var productindex = Math.floor(Math.random() * productNames.length);
        var price = parseFloat(priceValues[productindex]);
        var quantity = 1 + Math.round(Math.random() * 10);

        row["id"] = i;
        row["firstname"] = firstNames[Math.floor(Math.random() * firstNames.length)];
        row["lastname"] = lastNames[Math.floor(Math.random() * lastNames.length)];
        row["productname"] = productNames[productindex];
        row["price"] = price;
        row["quantity"] = quantity;
        row["total"] = price * quantity;

        data[i] = row;
    }
    return data;
}

var source =
{
    datatype: "array",
    localdata: {},
    totalrecords: 1000000
};

// load virtual data.
var rendergridrows = function (params) {
    var data = generatedata(params.startindex, params.endindex);
    return data;
}            
                        </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <h2 class="documentation-top-header">
                        Events</h2>
                </td>
            </tr>
            <tr>
                <td class="documentation-option-type-click">
                    <span id='Span27'>initialized</span>
                </td>
                <td>
                    <span>Event</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            This event is triggered when the Grid is initialized.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Bind to the initialized event by type: jqxGrid.
                        </p>
                        <pre><code>$('#jqxGrid').on('initialized', function () { // Some code here. }); </code></pre>
                    </div>
                </td>
            </tr>
           <tr>
                <td class="documentation-option-type-click">
                    <span id='Span47'>rowclick</span>
                </td>
                <td>
                    <span>Event</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            This event is triggered when a row is clicked.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Bind to the rowclick event by type: jqxGrid.
                        </p>
                        <pre><code>
$('#jqxGrid').on('rowclick', function (event) 
{
    var args = event.args;
    var row = args.rowindex;
});
                         </code></pre>
                    </div>
                </td>
            </tr>
        <tr>
                <td class="documentation-option-type-click">
                    <span id='Span176'>rowdoubleclick</span>
                </td>
                <td>
                    <span>Event</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            This event is triggered when a row is double clicked.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Bind to the rowdoubleclick event by type: jqxGrid.
                        </p>
                        <pre><code>
$('#jqxGrid').on('rowdoubleclick', function (event) 
{
    var args = event.args;
    var row = args.rowindex;
});
                         </code></pre>
                    </div>
                </td>
            </tr>
       <tr>
                <td class="documentation-option-type-click">
                    <span id='Span48'>rowselect</span>
                </td>
                <td>
                    <span>Event</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            This event is triggered when a row is selected.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Bind to the rowselect event by type: jqxGrid.
                        </p>
                        <pre><code>
$('#jqxGrid').on('rowselect', function (event) 
{
    var args = event.args;
    var row = args.rowindex;
});
                         </code></pre>
                    </div>
                </td>
            </tr>
       <tr>
                <td class="documentation-option-type-click">
                    <span id='Span51'>rowunselect</span>
                </td>
                <td>
                    <span>Event</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            This event is triggered when a row is unselected.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Bind to the rowunselect event by type: jqxGrid.
                        </p>
                        <pre><code>
$('#jqxGrid').on('rowunselect', function (event) 
{
    var args = event.args;
    var row = args.rowindex;
});
                         </code></pre>
                    </div>
                </td>
            </tr>
       <tr>
                <td class="documentation-option-type-click">
                    <span id='Span174'>rowexpand</span>
                </td>
                <td>
                    <span>Event</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            This event is triggered when a row with details is expanded.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Bind to the rowexpand event by type: jqxGrid.
                        </p>
                        <pre><code>
$('#jqxGrid').on('rowexpand', function (event) 
{
    var args = event.args;
    var details = args.details;
    var row = args.rowindex;
});
                         </code></pre>
                    </div>
                </td>
            </tr>
      <tr>
                <td class="documentation-option-type-click">
                    <span id='Span175'>rowcollapse</span>
                </td>
                <td>
                    <span>Event</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            This event is triggered when a row with details is collapsed.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Bind to the rowcollapse event by type: jqxGrid.
                        </p>
                        <pre><code>
$('#jqxGrid').on('rowcollapse', function (event) 
{
    var args = event.args;
    var details = args.details;
    var row = args.rowindex;
});
                         </code></pre>
                    </div>
                </td>
            </tr>
       <tr>
                <td class="documentation-option-type-click">
                    <span id='Span49'>groupexpand</span>
                </td>
                <td>
                    <span>Event</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            This event is triggered when a group is expanded.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Bind to the groupexpand event by type: jqxGrid.
                        </p>
                        <pre><code>
$("#jqxgrid").on('groupexpand', function (event) {
    var args = event.args;
    var group = args.group;
    var level = args.level;
});
                        </code></pre>
                    </div>
                </td>
            </tr>
       <tr>
                <td class="documentation-option-type-click">
                    <span id='Span52'>groupcollapse</span>
                </td>
                <td>
                    <span>Event</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            This event is triggered when a group is collapsed.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Bind to the groupcollapse event by type: jqxGrid.
                        </p>
                        <pre><code>
$("#jqxgrid").on('groupcollapse', function (event) {
    var args = event.args;
    var group = args.group;
    var level = args.level;
});
                        </code></pre>
                    </div>
                </td>
            </tr>
       <tr>
                <td class="documentation-option-type-click">
                    <span id='Span50'>sort</span>
                </td>
                <td>
                    <span>Event</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            This event is triggered when the Grid is sorted.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Bind to the sort event by type: jqxGrid.
                        </p>
                        <pre><code>
$("#jqxgrid").on("sort", function (event) {
    var sortinformation = event.args.sortinformation;
    var sortdirection = sortinformation.sortdirection.ascending ? "ascending" : "descending";
});                       
                        </code></pre>
                    </div>
                </td>
            </tr>
           <tr>
                <td class="documentation-option-type-click">
                    <span id='Span150'>filter</span>
                </td>
                <td>
                    <span>Event</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            This event is triggered when the Grid is filtered.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Bind to the filter event by type: jqxGrid.
                        </p>
                        <pre><code>
$("#jqxgrid").on("filter", function (event) {
     var filterinfo = $("#jqxgrid").jqxGrid('getfilterinformation');
});                       
                        </code></pre>
                    </div>
                </td>
            </tr>
           <tr>
                <td class="documentation-option-type-click">
                    <span id='Span152'>columnresized</span>
                </td>
                <td>
                    <span>Event</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            This event is triggered when a Grid Column is resized.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Bind to the columnresized event by type: jqxGrid.
                        </p>
                        <pre><code>
$("#jqxgrid").on("columnresized", function (event) {
    var args = event.args;
    var column = args.column;
    var newwidth = args.newwidth;
    var oldwidth = args.oldwidth;
    var datafield = args.datafield;
});                       
                        </code></pre>
                    </div>
                </td>
            </tr>
           <tr>
                <td class="documentation-option-type-click">
                    <span id='Span202'>columnreordered</span>
                </td>
                <td>
                    <span>Event</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            This event is triggered when a Grid Column is moved to a new position.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Bind to the columnreordered event by type: jqxGrid.
                        </p>
                        <pre><code>
$("#jqxgrid").on("columnreordered", function (event) {
    var args = event.args;
    var columntext = args.columntext;
    var datafield = args.datafield;
    var oldindex = args.oldindex;
    var newindex = args.newindex;
});                       
                        </code></pre>
                    </div>
                </td>
            </tr>
      <tr>
                <td class="documentation-option-type-click">
                    <span id='Span53'>columnclick</span>
                </td>
                <td>
                    <span>Event</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            This event is triggered when a column is clicked.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Bind to the columnclick event by type: jqxGrid.
                        </p>
                        <pre><code>
$("#jqxgrid").on("columnclick", function (event) {
    var column = event.args.column;
});                       
                        </code></pre>
                    </div>
                </td>
            </tr>
           <tr>
                <td class="documentation-option-type-click">
                    <span id='Span177'>cellclick</span>
                </td>
                <td>
                    <span>Event</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            This event is triggered when a cell is clicked.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Bind to the cellclick event by type: jqxGrid.
                        </p>
                        <pre><code>
$("#jqxgrid").on("cellclick", function (event) {
    var column = event.args.column;
    var rowindex = event.args.rowindex;
    var columnindex = event.args.columnindex;
});                       
                        </code></pre>
                    </div>
                </td>
            </tr>
           <tr>
                <td class="documentation-option-type-click">
                    <span id='Span55'>celldoubleclick</span>
                </td>
                <td>
                    <span>Event</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            This event is triggered when a cell is double-clicked.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Bind to the celldoubleclick event by type: jqxGrid.
                        </p>
                        <pre><code>
$("#jqxgrid").on("celldoubleclick", function (event) {
    var column = event.args.column;
    var rowindex = event.args.rowindex;
    var columnindex = event.args.columnindex;
});                       
                        </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
                <td class="documentation-option-type-click">
                    <span id='Span153'>cellselect</span>
                </td>
                <td>
                    <span>Event</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            This event is triggered when a cell is selected.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Bind to the cellselect event by type: jqxGrid.
                        </p>
                        <pre><code>
$("#jqxgrid").on('cellselect', function (event) {
    var columnheader = $("#jqxgrid").jqxGrid('getcolumn', event.args.datafield).text;
    var rowindex = event.args.rowindex;
});
                         </code></pre>
                    </div>
                </td>
            </tr>
           <tr>
                <td class="documentation-option-type-click">
                    <span id='Span154'>cellunselect</span>
                </td>
                <td>
                    <span>Event</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            This event is triggered when a cell is unselected.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Bind to the cellunselect event by type: jqxGrid.
                        </p>
                        <pre><code>
$("#jqxgrid").on('cellunselect', function (event) {
    var columnheader = $("#jqxgrid").jqxGrid('getcolumn', event.args.datafield).text;
    var rowindex = event.args.rowindex;
});
                         </code></pre>
                    </div>
                </td>
            </tr>
           <tr>
                <td class="documentation-option-type-click">
                    <span id='Span170'>cellvaluechanged</span>
                </td>
                <td>
                    <span>Event</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            This event is triggered when a cell's value is changed.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Bind to the cellvaluechanged event by type: jqxGrid.
                        </p>
                        <pre><code>
$("#jqxgrid").on('cellvaluechanged', function (event) {
   var column = args.datafield;
   var row = args.rowindex;
   var value = args.newvalue;
   var oldvalue = args.oldvalue;
});
                         </code></pre>
                    </div>
                </td>
            </tr>
          <tr>
                <td class="documentation-option-type-click">
                    <span id='Span171'>cellbeginedit</span>
                </td>
                <td>
                    <span>Event</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            This event is triggered when a cell's editor is displayed.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Bind to the cellbeginedit event by type: jqxGrid.
                        </p>
                        <pre><code>
$("#jqxgrid").on('cellbeginedit', function (event) {
   var column = args.datafield;
   var row = args.rowindex;
   var value = args.value;
});
                         </code></pre>
                    </div>
                </td>
            </tr>
          <tr>
                <td class="documentation-option-type-click">
                    <span id='Span172'>cellendedit</span>
                </td>
                <td>
                    <span>Event</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            This event is triggered when a cell's edit operation has ended.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Bind to the cellendedit event by type: jqxGrid.
                        </p>
                        <pre><code>
$("#jqxgrid").on('cellendedit', function (event) {
   var column = args.datafield;
   var row = args.rowindex;
   var value = args.value;
   var oldvalue = args.oldvalue;
});
                         </code></pre>
                    </div>
                </td>
            </tr>
      <tr>
                <td class="documentation-option-type-click">
                    <span id='Span54'>pagechanged</span>
                </td>
                <td>
                    <span>Event</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            This event is triggered when the current page is changed.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Bind to the pagechanged event by type: jqxGrid.
                        </p>
                        <pre><code>
$("#jqxgrid").on("pagechanged", function (event) {
     var args = event.args;
     var pagenum = args.pagenum;
     var pagesize = args.pagesize;
});                       
                        </code></pre>
                    </div>
                </td>
            </tr>
   <tr>
                <td class="documentation-option-type-click">
                    <span id='Span56'>pagesizechanged</span>
                </td>
                <td>
                    <span>Event</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            This event is triggered when the page size is changed.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Bind to the pagesizechanged event by type: jqxGrid.
                        </p>
                        <pre><code>
$("#jqxgrid").on("pagesizechanged", function (event) {
     var args = event.args;
     var pagenum = args.pagenum;
     var oldpagesize = args.oldpagesize;
     var pagesize = args.pagesize;
});                       
                        </code></pre>
                    </div>
                </td>
            </tr>
  <tr>
                <td class="documentation-option-type-click">
                    <span id='Span57'>bindingcomplete</span>
                </td>
                <td>
                    <span>Event</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            This event is triggered when the binding is completed.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Bind to the bindingcomplete event by type: jqxGrid.
                        </p>
                        <pre><code>
$("#jqxgrid").on("bindingcomplete", function (event) {
 // your code here.
});                       
                        </code></pre>
                    </div>
                </td>
            </tr>
<tr>
                <td class="documentation-option-type-click">
                    <span id='Span58'>groupschanged</span>
                </td>
                <td>
                    <span>Event</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            This event is triggered when a group is added, inserted or removed.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Bind to the groupschanged event by type: jqxGrid.
                        </p>
                        <pre><code>
$("#jqxgrid").on("groupschanged", function (event) {
 // your code here.
});                       
                        </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <h2 class="documentation-top-header">
                        Methods</h2>
                </td>
            </tr>
           <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                    Common
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr> 
            <tr>
                <td class="documentation-option-type-click">
                    <span id='Span203'>getcolumnindex</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                           <p>(requires jqxgrid.columnsreorder.js)</p>
                           <p>
                            Gets the index of a column in the columns collection.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the getcolumnindex method.
                        </p>
                        <pre><code>
// @param String. The column datafield member.
var index = $('#grid').jqxGrid('getcolumnindex', 'name');
                        </code></pre>
                    </div>
                </td>
            </tr>  
               <tr>
                <td class="documentation-option-type-click">
                    <span id='Span183'>setcolumnindex</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                           <p>(requires jqxgrid.columnsreorder.js)</p>
                           <p>
                            Sets the index of a column in the columns collection.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the setcolumnindex method.
                        </p>
                        <pre><code>
// @param String. The column datafield member.
// @param Number. The column's number.
var column = $('#grid').jqxGrid('setcolumnindex', 'name', 3);
                        </code></pre>
                    </div>
                </td>
            </tr>    
           <tr>
                <td class="documentation-option-type-click">
                    <span id='Span82'>getcolumn</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Gets a column by datafield value.
                        </p>
                        <ul>
                            <li>datafield - column's datafield. To get the cells labels and values from the data source, the Grid uses the "datafield" and "displayfield" properties. If the "displayfield" is not set, the "displayfield" is equal to the "datafield'.</li>
                            <li>text - column's text.</li>
                            <li>displayfield - column's displayfield. To get the cells labels and values from the data source, the Grid uses the "datafield" and "displayfield" properties. If the "displayfield" is not set, the "displayfield" is equal to the "datafield'.</li>
                            <li>sortable - determines whether the column is sortable.</li>
                            <li>filterable - determines whether the column is filterable.</li>
                            <li>exportable - determines whether the column will be exported through the "exportdata" method.</li>
                            <li>editable - determines whether the column is editable.</li>
                            <li>groupable - determines whether the column is groupable.</li>
                            <li>resizable - determines whether the column is resizable.</li>
                            <li>draggable - determines whether the column is draggable.</li>
                            <li>classname - determines the column's header classname.</li>
                            <li>cellclassname - determines the column's cells classname.</li>
                            <li>width - determines the column's width.</li>
                            <li>menu - determines whether the column has an associated popup menu or not.</li>
                        </ul>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the getcolumn method.
                        </p>
                        <pre><code>
// @param String. The column datafield member.
var column = $('#grid').jqxGrid('getcolumn', 'columndatafield');
                        </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
                <td class="documentation-option-type-click">
                    <span id='Span83'>setcolumnproperty</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Sets a property of a column.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the setcolumnproperty method. Possible property names: 'text', 'hidden', 'hideable', 'renderer', 'cellsrenderer', 'align', 'cellsalign', 'cellsformat', 'pinned', 'contenttype', 'resizable', 'filterable', 'editable', 'cellclassname', 'classname', 'width', 'minwidth', 'maxwidth'
                        </p>
                        <pre><code>
// @param String. Column data field.
// @param String. Property Name.
// @param Object. Property Value.
$('#grid').jqxGrid('setcolumnproperty', 'firstname', 'width', 100);
                        </code></pre>
                    </div>
                </td>
            </tr>
           <tr>
                <td class="documentation-option-type-click">
                    <span id='Span84'>getcolumnproperty</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Gets a property of a column.  Possible property names: 'text', 'hidden', 'hideable', 'renderer', 'cellsrenderer', 'align', 'cellsalign', 'cellsformat', 'pinned', 'contenttype', 'resizable', 'filterable', 'editable', 'cellclassname', 'classname', 'width', 'minwidth', 'maxwidth'
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the getcolumnproperty method.
                        </p>
                        <pre><code>
// @param String. Column data field.
// @param String. Property Name.
var value = $('#grid').jqxGrid('getcolumnproperty', 'firstname', 'width');
                        </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
                <td class="documentation-option-type-click">
                    <span id='Span88'>hidecolumn</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Hides a column.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the hidecolumn method.
                        </p>
                        <pre><code>
// @param String. The column datafield member.
$('#grid').jqxGrid('hidecolumn', 'columndatafield');
                        </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
                <td class="documentation-option-type-click">
                    <span id='Span89'>showcolumn</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Shows a column.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the showcolumn method.
                        </p>
                        <pre><code>
// @param String. The column datafield member.
$('#grid').jqxGrid('showcolumn', 'columndatafield');
                        </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
                <td class="documentation-option-type-click">
                    <span id='Span90'>iscolumnvisible</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Gets whether a column is visible. Returns a boolean value.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the iscolumnvisible method.
                        </p>
                        <pre><code>
// @param String. The column datafield member.
var visible = $('#grid').jqxGrid('iscolumnvisible', 'columndatafield');
                        </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
                <td class="documentation-option-type-click">
                    <span id='Span92'>iscolumnhideable</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Gets whether a column is hideable. Returns a boolean value.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the iscolumnhideable method.
                        </p>
                        <pre><code>
// @param String. The column datafield member.
var hideable = $('#grid').jqxGrid('iscolumnhideable', 'columndatafield');
                        </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
                <td class="documentation-option-type-click">
                    <span id='Span104'>pincolumn</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Pins the column.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the pincolumn method.
                        </p>
                        <pre><code>
// @param String. The column datafield member.
$('#grid').jqxGrid('pincolumn', 'columndatafield');
                        </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
                <td class="documentation-option-type-click">
                    <span id='Span105'>unpincolumn</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Unpins the column.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the unpincolumn method.
                        </p>
                        <pre><code>
// @param String. The column datafield member.
$('#grid').jqxGrid('unpincolumn', 'columndatafield');
                        </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
                <td class="documentation-option-type-click">
                    <span id='Span106'>iscolumnpinned</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Gets whether a column is pinned. Returns a boolean value.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the iscolumnpinned method.
                        </p>
                        <pre><code>
// @param String. The column datafield member.
var pinned = $('#grid').jqxGrid('iscolumnpinned', 'columndatafield');
                        </code></pre>
                    </div>
                </td>
            </tr>
    <tr>
            <td class="documentation-option-type-click">
                    <span id='Span181'>autoresizecolumns</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                   
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>(requires jqxgrid.columnsresize.js)</p>
                        <p>
                            Auto-resizes all columns.</p>
                         <h4>
                            Code example</h4>
                         Invoke the autoresizecolumns method. Optional parameter:
                        <br />
                             'all' - resize columns to fit to cells and column header. This is the default option.
                        <br />
                             'cells' - resize columns to fit to the cells text. 
                        <br />
                            'column' - resize columns to fit to the columns text.
                        <pre><code>$('#grid').jqxGrid('autoresizecolumns'); </code></pre>
                    </div>
                </td>
            </tr>
    <tr>
            <td class="documentation-option-type-click">
                    <span id='Span182'>autoresizecolumn</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                   
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>(requires jqxgrid.columnsresize.js)</p>
                        <p>
                            Auto-resizes a column.</p>
                         <h4>
                            Code example</h4>
                         Invoke the autoresizecolumn method. 
                        <br />
                        First Parameter - the column's datafield. 
                        <br />
                        Second Parameter(optional:
                        <br />
                             'all' - resize columns to fit to cells and column header. This is the default option.
                        <br />
                             'cells' - resize columns to fit to the cells text. 
                        <br />
                            'column' - resize columns to fit to the columns text.
                        <pre><code>$('#grid').jqxGrid('autoresizecolumn', 'firstname'); </code></pre>
                    </div>
                </td>
            </tr>
    <tr>
                <td class="documentation-option-type-click">
                    <span id='Span179'>focus</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Sets the keyboard Focus to the jqxGrid widget.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the focus method.
                        </p>
                        <pre><code>$('#grid').jqxGrid('focus');</code></pre>
                    </div>
                </td>
            </tr>
            <tr>
                <td class="documentation-option-type-click">
                    <span id='Span81'>setrowdetails</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Sets details to a row.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the setrowdetails method.
                        </p>
                        <pre><code>
// @param Number. The row index.
// @param String. Row details.
// @param Number. Height or Row Details.
// @param Boolean. Hidden state.
$(&quot;#jqxgrid&quot;).jqxGrid('beginupdate');
$(&quot;#jqxgrid&quot;).jqxGrid('setrowdetails', 0, &quot;&lt;div class='tabs0' style='margin: 10px;'&gt;&lt;ul style='margin-left: 30px;'&gt;&lt;li&gt;Nancy Davolio&lt;/li&gt;&lt;li&gt;Notes&lt;/li&gt;&lt;/ul&gt;&lt;div class='information0'&gt;&lt;/div&gt;&lt;div class='notes0'&gt;&lt;/div&gt;&lt;/div&gt;&quot;, 200, false);
$(&quot;#jqxgrid&quot;).jqxGrid('setrowdetails', 1, &quot;&lt;div class='tabs1' style='margin: 10px;'&gt;&lt;ul style='margin-left: 30px;'&gt;&lt;li&gt;Andrew Fuller&lt;/li&gt;&lt;li&gt;Notes&lt;/li&gt;&lt;/ul&gt;&lt;div class='information1'&gt;&lt;/div&gt;&lt;div class='notes1'&gt;&lt;/div&gt;&lt;/div&gt;&quot;, 200, true);
$(&quot;#jqxgrid&quot;).jqxGrid('setrowdetails', 2, &quot;&lt;div class='tabs2' style='margin: 10px;'&gt;&lt;ul style='margin-left: 30px;'&gt;&lt;li&gt;Janet Leverling&lt;/li&gt;&lt;li&gt;Notes&lt;/li&gt;&lt;/ul&gt;&lt;div class='information2'&gt;&lt;/div&gt;&lt;div class='notes2'&gt;&lt;/div&gt;&lt;/div&gt;&quot;, 200, true);
$(&quot;#jqxgrid&quot;).jqxGrid('setrowdetails', 3, &quot;&lt;div class='tabs3' style='margin: 10px;'&gt;&lt;ul style='margin-left: 30px;'&gt;&lt;li&gt;Margaret Peacock&lt;/li&gt;&lt;li&gt;Notes&lt;/li&gt;&lt;/ul&gt;&lt;div class='information3'&gt;&lt;/div&gt;&lt;div class='notes3'&gt;&lt;/div&gt;&lt;/div&gt;&quot;, 200, true);
$(&quot;#jqxgrid&quot;).jqxGrid('setrowdetails', 4, &quot;&lt;div class='tabs4' style='margin: 10px;'&gt;&lt;ul style='margin-left: 30px;'&gt;&lt;li&gt;Steven Buchanan&lt;/li&gt;&lt;li&gt;Notes&lt;/li&gt;&lt;/ul&gt;&lt;div class='information4'&gt;&lt;/div&gt;&lt;div class='notes4'&gt;&lt;/div&gt;&lt;/div&gt;&quot;, 200, true);
$(&quot;#jqxgrid&quot;).jqxGrid('setrowdetails', 5, &quot;&lt;div class='tabs5' style='margin: 10px;'&gt;&lt;ul style='margin-left: 30px;'&gt;&lt;li&gt;Michael Suyama&lt;/li&gt;&lt;li&gt;Notes&lt;/li&gt;&lt;/ul&gt;&lt;div class='information5'&gt;&lt;/div&gt;&lt;div class='notes5'&gt;&lt;/div&gt;&lt;/div&gt;&quot;, 200, true);
$(&quot;#jqxgrid&quot;).jqxGrid('setrowdetails', 6, &quot;&lt;div class='tabs6' style='margin: 10px;'&gt;&lt;ul style='margin-left: 30px;'&gt;&lt;li&gt;Robert King&lt;/li&gt;&lt;li&gt;Notes&lt;/li&gt;&lt;/ul&gt;&lt;div class='information6'&gt;&lt;/div&gt;&lt;div class='notes6'&gt;&lt;/div&gt;&lt;/div&gt;&quot;, 200, true);
$(&quot;#jqxgrid&quot;).jqxGrid('setrowdetails', 7, &quot;&lt;div class='tabs7' style='margin: 10px;'&gt;&lt;ul style='margin-left: 30px;'&gt;&lt;li&gt;Laura Callahan&lt;/li&gt;&lt;li&gt;Notes&lt;/li&gt;&lt;/ul&gt;&lt;div class='information7'&gt;&lt;/div&gt;&lt;div class='notes7'&gt;&lt;/div&gt;&lt;/div&gt;&quot;, 200, true);
$(&quot;#jqxgrid&quot;).jqxGrid('setrowdetails', 8, &quot;&lt;div class='tabs8' style='margin: 10px;'&gt;&lt;ul style='margin-left: 30px;'&gt;&lt;li&gt;Anne Dodsworth&lt;/li&gt;&lt;li&gt;Notes&lt;/li&gt;&lt;/ul&gt;&lt;div class='information8'&gt;&lt;/div&gt;&lt;div class='notes8'&gt;&lt;/div&gt;&lt;/div&gt;&quot;, 200, true);
$(&quot;#jqxgrid&quot;).jqxGrid('endupdate');
                        </code></pre>
                    </div>
                </td>
            </tr>
           <tr>
                <td class="documentation-option-type-click">
                    <span id='Span110'>getrowdetails</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Gets the rows details.
                        </p>
                         Returns an object with the following fields:
                        <ul>
                            <li>
                                rowdetailshidden - determines whether the details are visible or not.
                            </li>
                            <li>
                                rowdetailsheight - determines the details height.
                            </li>
                            <li>
                                rowdetails - HTML string which contains the row details.
                            </li>
                        </ul>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the getrowdetails method.
                        </p>
                        <pre><code>
// @param Number. The row index.
var details = $('#grid').jqxGrid('getrowdetails', 1);
                        </code></pre>
                    </div>
                </td>
            </tr>
      <tr>
                <td class="documentation-option-type-click">
                    <span id='Span111'>showrowdetails</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Shows the details of a row.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the showrowdetails method.
                        </p>
                        <pre><code>
// @param Number. The row index.
$('#grid').jqxGrid('showrowdetails', 1);
                        </code></pre>
                    </div>
                </td>
            </tr>
           <tr>
                <td class="documentation-option-type-click">
                    <span id='Span112'>hiderowdetails</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Hides the details of a row.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the hiderowdetails method.
                        </p>
                        <pre><code>
// @param Number. The row index.
$('#grid').jqxGrid('hiderowdetails', 1);
                        </code></pre>
                    </div>
                </td>
            </tr>
    <tr>
                <td class="documentation-option-type-click">
                    <span id='Span118'>hiderow</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Hides a row.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the hiderow method.
                        </p>
                        <pre><code>
// @param Number. The row index.
$('#grid').jqxGrid('hiderow', 1);
                        </code></pre>
                    </div>
                </td>
            </tr>
    <tr>
                <td class="documentation-option-type-click">
                    <span id='Span119'>showrow</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Shows a row.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the showrow method.
                        </p>
                        <pre><code>
// @param Number. The row index.
$('#grid').jqxGrid('showrow', 1);
                        </code></pre>
                    </div>
                </td>
            </tr>
    <tr>
                <td class="documentation-option-type-click">
                    <span id='Span120'>isrowhiddenat</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Gets the hidden state of a row. Returns a boolean value.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the isrowhiddenat method.
                        </p>
                        <pre><code>
// @param Number. The row index.
var hidden = $('#grid').jqxGrid('isrowhiddenat', 1);
                        </code></pre>
                    </div>
                </td>
            </tr>
  <tr>
                <td class="documentation-option-type-click">
                    <span id='Span121'>updatebounddata</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Updates the bound data and refreshes the grid. You can pass 'filter' or 'sort' as parameter, if the update reason is change in 'filtering' or 'sorting'. 
                            To update only the data without the columns, use the 'data' parameter. To make a quick update of the cells, pass "cells" as parameter. Passing "cells" will refresh only the cells values when the new rows count is equal to the previous rows count.
                            To make a full update, do not pass any parameter.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the updatebounddata method.
                        </p>
                        <pre><code>
$('#grid').jqxGrid('updatebounddata');
                        </code></pre>
                    </div>
                </td>
            </tr>
  <tr>
                <td class="documentation-option-type-click">
                    <span id='Span122'>refreshdata</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Refreshes the data.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the refreshdata method.
                        </p>
                        <pre><code>
$('#grid').jqxGrid('refreshdata');
                        </code></pre>
                    </div>
                </td>
            </tr>
        <tr>
                <td class="documentation-option-type-click">
                    <span id='Span173'>refresh</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Repaints the Grid View.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the refresh method.
                        </p>
                        <pre><code>
$('#grid').jqxGrid('refresh');
                        </code></pre>
                    </div>
                </td>
            </tr>
        <tr>
                <td class="documentation-option-type-click">
                    <span id='Span123'>render</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Renders the Grid contents. The 'render' method completely refreshes the Grid cells, columns, layout and repaints the view. 
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the render method.
                        </p>
                        <pre><code>
$('#grid').jqxGrid('render');
                        </code></pre>
                    </div>
                </td>
            </tr>
   <tr>
                <td class="documentation-option-type-click">
                    <span id='Span124'>clear</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Clears the Grid contents.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the clear method.
                        </p>
                        <pre><code>
$('#grid').jqxGrid('clear');
                        </code></pre>
                    </div>
                </td>
            </tr>
<tr>
                <td class="documentation-option-type-click">
                    <span id='Span128'>getrowid</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Gets the id of a row. The returned value is a 'String' or 'Number' depending on the id's type. The parameter is the row's bound index.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the getrowid method. The example code below returns the id of the first row. 
                        </p>
                        <pre><code>
// @param row index.
var id = $('#grid').jqxGrid('getrowid', 0);
                        </code></pre>
                    </div>
                </td>
            </tr>

          <tr>
                <td class="documentation-option-type-click">
                    <span id='Span132'>destroy</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Removes the Grid from the document and releases its resources.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the destroy method.
                        </p>
                        <pre><code>
$('#grid').jqxGrid('destroy');
                        </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
                <td class="documentation-option-type-click">
                    <span id='Span127'>getrowdata</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Gets the data of a row. The returned value is a JSON Object. The parameter is the row's bound index.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the getrowdata method.
                        </p>
                        <pre><code>
// @param row index.
var data = $('#grid').jqxGrid('getrowdata', 0);
                        </code></pre>
                    </div>
                </td>
            </tr>
       <tr>
                <td class="documentation-option-type-click">
                    <span id='Span135'>getrenderedrowdata</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Gets the data of a row. The parameter is a visible index.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the getrenderedrowdata method.
                        </p>
                        <pre><code>
// @param row render index. 
var data = $('#grid').jqxGrid('getrenderedrowdata', 0);
                        </code></pre>
                    </div>
                </td>
            </tr>
      <tr>
                <td class="documentation-option-type-click">
                    <span id='Span86'>getrows</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Gets all rows. Returns an array of all rows loaded in the Grid. If the Grid is filtered, the returned value is an array of the filtered records.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the getrows method.
                        </p>
                        <pre><code>
var rows = $('#grid').jqxGrid('getrows');
                        </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
                <td class="documentation-option-type-click">
                    <span id='Span195'>getvisiblerows</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Gets the rows in the view which are displayed to the user. The returned value is an Array.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the getvisiblerows method.
                        </p>
                        <pre><code>
var visibleRows = $('#grid').jqxGrid('getvisiblerows');
                        </code></pre>
                    </div>
                </td>
            </tr>
        <tr>
                <td class="documentation-option-type-click">
                    <span id='Span196'>getloadedrows</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Gets an array of the rows loaded in the Grid. Each record in the array includes Grid speicifc properties like boundindex and uid(unique row identifier). 
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the getloadedrows method.
                        </p>
                        <pre><code>
var loadedRows = $('#grid').jqxGrid('getloadedrows');
                        </code></pre>
                    </div>
                </td>
            </tr>
           <tr>
                <td class="documentation-option-type-click">
                    <span id='Span37'>getdatainformation</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Gets bound data information.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the getdatainformation method.
                        </p>
                        <pre><code>
var datainformation = $('#grid').jqxGrid('getdatainformation');
var rowscount = datainformation.rowscount;
var sortinformation = datainformation.sortinformation;
var sortcolumn = sortinformation.sortcolumn;
var sortdirection = sortinformation.sortdirection;
var paginginformation = datainformation.paginginformation;
var pagenum = paginginformation.pagenum;
var pagesize = paginginformation.pagesize;
var pagescount = paginginformation.pagescount;
                        </code></pre>
                    </div>
                </td>
            </tr>
      <tr>
                <td class="documentation-option-type-click">
                    <span id='Span59'>getsortinformation</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Gets the sort information.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the getsortinformation method.
                        </p>
                        <pre><code>
var sortinformation = $('#grid').jqxGrid('getsortinformation');
// The sortcolumn represents the sort column's datafield. If there's no sort column, the sortcolumn is null.                            
var sortcolumn = sortinformation.sortcolumn;
// The sortdirection is an object with two fields: 'ascending' and 'descending'. Ex: { 'ascending': true, 'descending': false }                            
var sortdirection = sortinformation.sortdirection;
                        </code></pre>
                    </div>
                </td>
            </tr>
    <tr>
                <td class="documentation-option-type-click">
                    <span id='Span60'>getpaginginformation</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>(requires jqxgrid.pager.js)</p>
                        <p>
                            Gets the paging information.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the getpaginginformation method.
                        </p>
                        <pre><code>
var paginginformation = $('#grid').jqxGrid('getpaginginformation');
// The page's number.
var pagenum = paginginformation.pagenum;
// The page's size.
var pagesize = paginginformation.pagesize;
// The number of all pages.
var pagescount = paginginformation.pagescount;
                        </code></pre>
                    </div>
                </td>
            </tr>
          <tr>
                <td class="documentation-option-type-click">
                    <span id='Span70'>localizestrings</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Localizes the grid strings. This method allows you to change the valus of all Grid strings and also to change the cells formatting settings.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the localizestrings method.
                        </p>
                        <pre><code>
var localizationobj = {};
localizationobj.pagergotopagestring = "Page:";
localizationobj.pagershowrowsstring = "angezeigten datensätze";
localizationobj.pagerrangestring = " aus ";
localizationobj.pagernextbuttonstring = "kommend";
localizationobj.pagerpreviousbuttonstring = "vorherig";
localizationobj.sortascendingstring = "aufsteigend sortieren";
localizationobj.sortdescendingstring = "absteigend sortieren";
localizationobj.sortremovestring = "entfernen sortierung";

localizationobj.firstDay = 1;
localizationobj.percentsymbol = "%";
localizationobj.currencysymbol = "€";
localizationobj.currencysymbolposition = "before";
localizationobj.decimalseparator = ".";
localizationobj.thousandsseparator = ",";

var days = {
    // full day names
    names: ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"],
    // abbreviated day names
    namesAbbr: ["Sonn", "Mon", "Dien", "Mitt", "Donn", "Fre", "Sams"],
    // shortest day names
    namesShort: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"]
};

localizationobj.days = days;

var months = {
    // full month names (13 months for lunar calendards -- 13th month should be "" if not lunar)
    names: ["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""],
    // abbreviated month names
    namesAbbr: ["Jan", "Feb", "Mär", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dez", ""]
};

localizationobj.months = months;

// apply localization.
$("#jqxgrid").jqxGrid('localizestrings', localizationobj);
                        </code></pre>
                    </div>
                </td>
            </tr>
          <tr>
                <td class="documentation-option-type-click">
                    <span id='Span71'>scrolloffset</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Scrolls the grid contents.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the scrolloffset method.
                        </p>
                        <pre><code>
//@param Number. Top position.
//@param Number. Left position.
$('#grid').jqxGrid('scrolloffset', 10, 20);
                        </code></pre>
                    </div>
                </td>
            </tr>
       <tr>
                <td class="documentation-option-type-click">
                    <span id='Span208'>scrolling</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Returns an object with two boolean fields - "vertical" and "horizontal". If the user scrolls with the vertical scrollbar, "vertical" field's value is true. If the user scrolls with the horizontal scrollbar, the "horizontal" field's value is true. 
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the scrolloffset method.
                        </p>
                        <pre><code>
var scrolling = $('#grid').jqxGrid('scrolling');
                        </code></pre>
                    </div>
                </td>
            </tr>
    <tr>
                <td class="documentation-option-type-click">
                    <span id='Span72'>beginupdate</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Starts an update operation. This is appropriate when calling multiple methods or set multiple properties at once.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the beginupdate method.
                        </p>
                        <pre><code>.
$('#grid').jqxGrid('beginupdate');
                        </code></pre>
                    </div>
                </td>
            </tr>
    <tr>
                <td class="documentation-option-type-click">
                    <span id='Span73'>endupdate</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Ends the update operation.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the endupdate method.
                        </p>
                        <pre><code>
$('#grid').jqxGrid('endupdate');
                        </code></pre>
                    </div>
                </td>
            </tr>
    <tr>
                <td class="documentation-option-type-click">
                    <span id='Span74'>updating</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Gets the updating operation state. Returns a boolean value.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the updating method.
                        </p>
                        <pre><code>
var isupdating = $('#grid').jqxGrid('updating');
                        </code></pre>
                    </div>
                </td>
            </tr>
 <tr>
                <td class="documentation-option-type-click">
                    <span id='Span75'>ensurerowvisible</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Scrolls to a row. The parameter is a bound index.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the ensurerowvisible method.
                        </p>
                        <pre><code>
// @param Number. The row index.
$('#grid').jqxGrid('ensurerowvisible', 100);
                        </code></pre>
                    </div>
                </td>
            </tr>
           <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                    Sorting(requires jqxgrid.sort.js) 
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
          <tr>
                <td class="documentation-option-type-click">
                    <span id='Span61'>sortby</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Sorts the Grid data.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the sortby method.
                        </p>
                        <pre><code>
$('#grid').jqxGrid('sortby', 'columndatafield', 'asc');
                        </code></pre>
                    </div>
                </td>
            </tr>
          <tr>
                <td class="documentation-option-type-click">
                    <span id='Span133'>removesort</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Removes the sorting.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the removesort method.
                        </p>
                        <pre><code>
$('#grid').jqxGrid('removesort');
                        </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
                <td class="documentation-option-type-click">
                    <span id='Span62'>getsortcolumn</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>(requires jqxgrid.sort.js)</p>                 
                        <p>
                            Gets the sort column. Returns the column's datafield or null, if sorting is not applied.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the getsortcolumn method.
                        </p>
                        <pre><code>
var sortcolumn = $('#grid').jqxGrid('getsortcolumn');
                        </code></pre>
                    </div>
                </td>
            </tr>
           <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                    Grouping(requires jqxgrid.grouping.js)                
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <td class="documentation-option-type-click">
                    <span id='Span63'>addgroup</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Groups by a column.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the addgroup method.
                        </p>
                        <pre><code>
// @param String. The expected parameter is the column's datafield.
$('#grid').jqxGrid('addgroup', 'columndatafield');
                        </code></pre>
                    </div>
                </td>
            </tr>
           <tr>
                <td class="documentation-option-type-click">
                    <span id='Span64'>insertgroup</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Groups by a column. 
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the insertgroup method.
                        </p>
                        <pre><code>
// @param Number
// @param String. The expected parameter is the column's datafield.
$('#grid').jqxGrid('insertgroup', 1, 'columndatafield');
                        </code></pre>
                    </div>
                </td>
            </tr>
           <tr>
                <td class="documentation-option-type-click">
                    <span id='Span65'>removegroupat</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Removes a group at specific index.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the removegroupat method.
                        </p>
                        <pre><code>
//@param Number
$('#grid').jqxGrid('removegroupat', 1);
                        </code></pre>
                    </div>
                </td>
            </tr>
         <tr>
                <td class="documentation-option-type-click">
                    <span id='Span66'>removegroup</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Removes a group.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the removegroup method.
                        </p>
                        <pre><code>
//@param String. The expected parameter is the column's datafield.
$('#grid').jqxGrid('removegroup', 'firstname');
                        </code></pre>
                    </div>
                </td>
            </tr>
        <tr>
                <td class="documentation-option-type-click">
                    <span id='Span198'>cleargroups</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Clears all groups.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the cleargroups method.
                        </p>
                        <pre><code>
$('#grid').jqxGrid('cleargroups');
                        </code></pre>
                    </div>
                </td>
            </tr>
           <tr>
                <td class="documentation-option-type-click">
                    <span id='Span113'>getrootgroupscount</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Gets the number of root groups. 
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the getrootgroupscount method.
                        </p>
                        <pre><code>
var groups = $('#grid').jqxGrid('getrootgroupscount');
                        </code></pre>
                    </div>
                </td>
            </tr>
     <tr>
                <td class="documentation-option-type-click">
                    <span id='Span114'>collapsegroup</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Collapses a group.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the collapsegroup method.
                        </p>
                        <pre><code>
// @param Number. The group index.
$('#grid').jqxGrid('collapsegroup', 1);
                        </code></pre>
                    </div>
                </td>
            </tr>
     <tr>
                <td class="documentation-option-type-click">
                    <span id='Span115'>expandgroup</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Expands a group.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the expandgroup method.
                        </p>
                        <pre><code>
// @param Number. The group index.
$('#grid').jqxGrid('expandgroup', 1);
                        </code></pre>
                    </div>
                </td>
            </tr>
     <tr>
                <td class="documentation-option-type-click">
                    <span id='Span116'>collapseallgroups</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Collapses all groups.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the collapseallgroups method.
                        </p>
                        <pre><code>
$('#grid').jqxGrid('collapseallgroups');
                        </code></pre>
                    </div>
                </td>
            </tr>
    <tr>
                <td class="documentation-option-type-click">
                    <span id='Span117'>expandallgroups</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Expands all groups.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the expandallgroups method.
                        </p>
                        <pre><code>
$('#grid').jqxGrid('expandallgroups');
                        </code></pre>
                    </div>
                </td>
            </tr>
   <tr>
                <td class="documentation-option-type-click">
                    <span id='Span137'>getgroup</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Gets a group. The method returns an Object with details about the Group. The object has the following fields: 
                        </p>
                        <ul>
                            <li>group - group's name.</li>
                            <li>level - group's level in the group's hierarchy.</li>
                            <li>expanded - group's expand state.</li>
                            <li>subgroups - an array of sub groups or null.</li>
                            <li>subrows - an array of rows or null.</li>
                        </ul>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the getgroup method.
                        </p>
                        <pre><code>
// @param Number. The group index.
var group = $('#grid').jqxGrid('getgroup', 0);
                        </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
                <td class="documentation-option-type-click">
                    <span id='Span94'>iscolumngroupable</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Gets whether the user can group by a column. Returns a boolean value.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the iscolumngroupable method.
                        </p>
                        <pre><code>
// @param String. The column datafield member.
var groupable = $('#grid').jqxGrid('iscolumngroupable', 'columndatafield');
                        </code></pre>
                    </div>
                </td>
            </tr>
           <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                    Filtering(requires jqxgrid.filter.js) 
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
        <tr>
                <td class="documentation-option-type-click">
                    <span id='Span140'>addfilter</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Adds a filter to the Grid.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the addfilter method.
                        </p>
                        <pre><code>
var filtergroup = new $.jqx.filter();
var filtervalue = 10; // Each cell value is compared with the filter's value.
// filtertype - numericfilter, stringfilter, datefilter or customfilter. 
// condition
// possible conditions for string filter: 'EMPTY', 'NOT_EMPTY', 'CONTAINS', 'CONTAINS_CASE_SENSITIVE',
// 'DOES_NOT_CONTAIN', 'DOES_NOT_CONTAIN_CASE_SENSITIVE', 'STARTS_WITH', 'STARTS_WITH_CASE_SENSITIVE',
// 'ENDS_WITH', 'ENDS_WITH_CASE_SENSITIVE', 'EQUAL', 'EQUAL_CASE_SENSITIVE', 'NULL', 'NOT_NULL'
// possible conditions for numeric filter: 'EQUAL', 'NOT_EQUAL', 'LESS_THAN', 'LESS_THAN_OR_EQUAL', 'GREATER_THAN', 'GREATER_THAN_OR_EQUAL', 'NULL', 'NOT_NULL'
// possible conditions for date filter: 'EQUAL', 'NOT_EQUAL', 'LESS_THAN', 'LESS_THAN_OR_EQUAL', 'GREATER_THAN', 'GREATER_THAN_OR_EQUAL', 'NULL', 'NOT_NULL'                         
var filter = filtergroup.createfilter(filtertype, filtervalue, condition);
var filter2 = filtergroup.createfilter(filtertype, filtervalue2, condition2);
// To create a custom filter, you need to call the createfilter function and pass a custom callback function as a fourth parameter.
// If the callback's name is 'customfilter', the Grid will pass 3 params to this function - filter's value, current cell value to evaluate and the condition.                        
// operator - 0 for "and" and 1 for "or"
filtergroup.addfilter(operator, filter);
filtergroup.addfilter(operator, filter2);
// datafield is the bound field.
// adds a filter to the grid.
$('#grid').jqxGrid('addfilter', datafield, filtergroup);
// to add and apply the filter, use this:
$('#grid').jqxGrid('addfilter', datafield, filtergroup, true);
                        </code></pre>
                    </div>
                </td>
            </tr>
          <tr>
                <td class="documentation-option-type-click">
                    <span id='Span141'>removefilter</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Removes a filter from the Grid.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the removefilter method.
                        </p>
                        <pre><code>// datafield is the bound field.
$('#grid').jqxGrid('removefilter', datafield);
// to remove the filter and refresh the Grid, use this:
$('#grid').jqxGrid('removefilter', datafield, true);
                        </code></pre>
                    </div>
                </td>
            </tr>
           <tr>
                <td class="documentation-option-type-click">
                    <span id='Span142'>clearfilters</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Clears all filters from the Grid.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the clearfilters method.
                        </p>
                        <pre><code>$('#grid').jqxGrid('clearfilters');</code></pre>
                    </div>
                </td>
            </tr>
            <tr>
                <td class="documentation-option-type-click">
                    <span id='Span143'>applyfilters</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Applies all filters to the Grid.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the applyfilters method.
                        </p>
                        <pre><code>$('#grid').jqxGrid('applyfilters');</code></pre>
                    </div>
                </td>
            </tr>
            <tr>
                <td class="documentation-option-type-click">
                    <span id='Span207'>refreshfilterrow</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Refreshes the filter row and updates the filter widgets. The filter row's widgets are synchronized with the applied filters. 
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the refreshfilterrow method.
                        </p>
                        <pre><code>$('#grid').jqxGrid('refreshfilterrow');</code></pre>
                    </div>
                </td>
            </tr>   
       <tr>
                <td class="documentation-option-type-click">
                    <span id='Span144'>getfilterinformation</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Gets the information about the Grid filters. The method returns an array of the applied filters. The returned information includes the filter objects and filter columns.
                            Each filter in the Array has the following fields:
                        </p>
                        <ul>
                            <li>
                                filter - a filter object which may contain one or more filters.
                                <br />
                                Properties and Methods of the filter object.
                                <ul>
                                    <li>getfilters - returns an array of all filters in the filter object. Each filter in the Array has:
                                        <ul>
                                            <li>filtervalue - filter's value.</li>
                                            <li>comparisonoperator - filter's operator. For String filter the value could be: 'EMPTY', 'NOT_EMPTY', 'CONTAINS', 'CONTAINS_CASE_SENSITIVE',
        'DOES_NOT_CONTAIN', 'DOES_NOT_CONTAIN_CASE_SENSITIVE', 'STARTS_WITH', 'STARTS_WITH_CASE_SENSITIVE',
        'ENDS_WITH', 'ENDS_WITH_CASE_SENSITIVE', 'EQUAL', 'EQUAL_CASE_SENSITIVE', 'NULL', 'NOT_NULL. For Date and Number filter the value could be: 'EQUAL', 'NOT_EQUAL', 'LESS_THAN', 'LESS_THAN_OR_EQUAL', 'GREATER_THAN', 'GREATER_THAN_OR_EQUAL', 'NULL', 'NOT_NULL'. For Boolean filter, the value could be:
                                                'EQUAL', 'NOT_EQUAL'
                                            </li>
                                            <li>type - filter's type - 'stringfilter', 'numericfilter', 'booleanfilter' or 'datefilter'.</li>
                                        </ul>
                                    </li>
                                     <li>operator - 'and' or 'or'. Determines the connection between the filters in the group.</li>
                                </ul>
                            </li>
                            <li>
                                filtercolumn - the column's datafield.
                            </li>
                            <li>
                                filtercolumntext - the column's text.
                            </li>
                        </ul>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the getfilterinformation method.
                        </p>
                        <pre><code>
var filtersinfo = $('#grid').jqxGrid('getfilterinformation');
                        </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
           <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                    Paging(requires jqxgrid.pager.js) 
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
         <tr>
                <td class="documentation-option-type-click">
                    <span id='Span67'>gotopage</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Navigates to a page when the Grid paging is enabled i.e when the pageable property value is true.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the gotopage method.
                        </p>
                        <pre><code>
//@param Number
$('#grid').jqxGrid('gotopage', 1);
                        </code></pre>
                    </div>
                </td>
            </tr>
     <tr>
                <td class="documentation-option-type-click">
                    <span id='Span68'>gotoprevpage</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Navigates to a previous page when the Grid paging is enabled i.e when the pageable property value is true.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the gotoprevpage method.
                        </p>
                        <pre><code>
$('#grid').jqxGrid('gotoprevpage');
                        </code></pre>
                    </div>
                </td>
            </tr>
           <tr>
                <td class="documentation-option-type-click">
                    <span id='Span69'>gotonextpage</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Navigates to a next page when the Grid paging is enabled i.e when the pageable property value is true.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the gotonextpage method.
                        </p>
                        <pre><code>
$('#grid').jqxGrid('gotonextpage');
                        </code></pre>
                    </div>
                </td>
            </tr>
           <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                    Editing(requires jqxgrid.edit.js) 
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
           <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
  <tr>
                <td class="documentation-option-type-click">
                    <span id='Span125'>getcell</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Gets a cell. Returns an object with the following fields:
                        </p>
                        <ul>
                            <li>value - cell's value.</li>
                            <li>row - cell's row number.</li>
                            <li>column - column's datafield.</li>
                        </ul>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the getcell method.
                        </p>
                        <pre><code>
// @param Number. The row index.
// @param String. The column datafield.
var cell = $('#grid').jqxGrid('getcell', 0, datafield);
                        </code></pre>
                    </div>
                </td>
            </tr>
<tr>
                <td class="documentation-option-type-click">
                    <span id='Span136'>getrenderedcell</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Gets a cell. Returns an object with the following fields:
                        </p>
                        <ul>
                            <li>value - cell's value.</li>
                            <li>row - cell's row number.</li>
                            <li>column - column's datafield.</li>
                        </ul>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the getrenderedcell method.
                        </p>
                        <pre><code>
// @param Number. The row's render index.
// @param String. The column datafield.
var cell = $('#grid').jqxGrid('getrenderedcell', 0, datafield);
                        </code></pre>
                    </div>
                </td>
            </tr>
<tr>
                <td class="documentation-option-type-click">
                    <span id='Span178'>getcellatposition</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Gets a cell at specific position. Returns an object with the following fields:
                        </p>
                        <ul>
                            <li>value - cell's value.</li>
                            <li>row - cell's row number.</li>
                            <li>column - column's datafield.</li>
                        </ul>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the getcellatposition method.
                        </p>
                        <pre><code>
// @param Number. The left position.
// @param Number. The top position.
var cell = $('#grid').jqxGrid('getcellatposition', left, top);
                        </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
                <td class="documentation-option-type-click">
                    <span id='Span126'>getcellvalue</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Gets the value of a cell. 
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the getcellvalue method.
                        </p>
                        <pre><code>
// @param row index.
// @param column datafield.
var value = $('#grid').jqxGrid('getcellvalue', 0, "columndatafield");
                        </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
                <td class="documentation-option-type-click">
                    <span id='Span38'>setcellvalue</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Sets a new value to a cell.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the setcellvalue method.
                        </p>
                        <pre><code>
// @param row index.
// @param column datafield.
// @param cell value
 $("#jqxgrid").jqxGrid('setcellvalue', 0, "firstname", "New Value");
                        </code></pre>
                    </div>
                </td>
            </tr>
        <tr>
                <td class="documentation-option-type-click">
                    <span id='Span161'>begincelledit</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Shows the cell's editor.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the begincelledit method.
                        </p>
                        <pre><code>
// @param row index
// @param column datafield.
var editable = $("#jqxgrid").jqxGrid('begincelledit', 0, "firstname");
                        </code></pre>
                    </div>
                </td>
            </tr>
              <tr>
                <td class="documentation-option-type-click">
                    <span id='Span162'>endcelledit</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Hides the edit cell's editor and saves or cancels the changes.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the endcelledit method.
                        </p>
                        <pre><code>
// @param row index
// @param column datafield.
// @param Boolean. - "true" cancels the changes, "false" confirms the changes.
var editable = $("#jqxgrid").jqxGrid('endcelledit', 0, "firstname", false);
                        </code></pre>
                    </div>
                </td>
            </tr>
             <tr>
                <td class="documentation-option-type-click">
                    <span id='Span194'>showvalidationpopup</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Displays a validation popup below a Grid cell.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the showvalidationpopup method.
                        </p>
                        <pre><code>
// @param row index
// @param column datafield.
// @param String(optional)
$("#jqxgrid").jqxGrid('showvalidationpopup', 0, "firstname", "Invalid Value");
                        </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
                <td class="documentation-option-type-click">
                    <span id='Span129'>updaterow</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Updates a row. 
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the updaterow method.
                        </p>
                        <pre><code>
// @param row id. Use the 'getrowid' method to get the id of a row.
// @param row data. The expected value is a JSON object.
var value = $('#grid').jqxGrid('updaterow', rowid, newdata);
                        </code></pre>
                    </div>
                </td>
            </tr>
           <tr>
                <td class="documentation-option-type-click">
                    <span id='Span130'>deleterow</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Deletes a row. Returns a boolean value.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the deleterow method.
                        </p>
                        <pre><code>
// @param row id. Use the 'getrowid' method to get the id of a row.
var value = $('#grid').jqxGrid('deleterow', rowid);
                        </code></pre>
                    </div>
                </td>
            </tr>
           <tr>
                <td class="documentation-option-type-click">
                    <span id='Span131'>addrow</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Adds a row.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the addrow method.
                        </p>
                        <pre><code>
// @param row id. Pass null, if you want the new id to be auto-generated or pass a row id.
// @param row data. The expected value is a JSON Object.
var value = $('#grid').jqxGrid('addrow', rowid, newdata);
                        </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                    Selection(requires jqxgrid.selection.js) 
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
          <tr>
                <td class="documentation-option-type-click">
                    <span id='Span76'>selectrow</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>The expected selection mode is 'singlerow', 'multiplerows' or 'multiplerowsextended'</p>
                       <p>
                            Selects a row.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the selectrow method.
                        </p>
                        <pre><code>
// @param Number. The row's bound index.
$('#grid').jqxGrid('selectrow', 10);
                        </code></pre>
                    </div>
                </td>
            </tr>
         <tr>
                <td class="documentation-option-type-click">
                    <span id='Span77'>unselectrow</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                       <p>The expected selection mode is 'singlerow', 'multiplerows' or 'multiplerowsextended'</p>
                         <p>
                            Unselects a row.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the unselectrow method.
                        </p>
                        <pre><code>
// @param Number. The row's bound index.
$('#grid').jqxGrid('unselectrow', 10);
                        </code></pre>
                    </div>
                </td>
            </tr>
    <tr>
                <td class="documentation-option-type-click">
                    <span id='Span109'>selectallrows</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                       <p>The  selection mode should be set to: 'multiplerows' or 'multiplerowsextended'</p>
                         <p>
                            Selects all Grid rows.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the selectallrows method.
                        </p>
                        <pre><code>
$('#grid').jqxGrid('selectallrows');
                        </code></pre>
                    </div>
                </td>
            </tr>          
          <tr>
                <td class="documentation-option-type-click">
                    <span id='Span155'>selectcell</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                       <p>The expected selection mode is 'singlecell', 'multiplecells' or 'multiplecellsextended'</p>
                         <p>
                            Selects a cell.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the selectcell method.
                        </p>
                        <pre><code>
// @param Number. The row's bound index.
// @param String. The column datafield.
$('#grid').jqxGrid('selectcell', 10, 'firstname');
                        </code></pre>
                    </div>
                </td>
            </tr>
         <tr>
                <td class="documentation-option-type-click">
                    <span id='Span156'>unselectcell</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                       <p>The expected selection mode is 'singlecell', 'multiplecells' or 'multiplecellsextended'</p>
                         <p>
                            Unselects a cell.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the unselectcell method.
                        </p>
                        <pre><code>
// @param Number. The row's bound index.
// @param String. The column datafield.
$('#grid').jqxGrid('unselectcell', 10, 'firstname');
                        </code></pre>
                    </div>
                </td>
            </tr>
           <tr>
                <td class="documentation-option-type-click">
                    <span id='Span95'>clearselection</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>
                            Clears the selection.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the clearselection method.
                        </p>
                        <pre><code>
$('#grid').jqxGrid('clearselection');
                        </code></pre>
                    </div>
                </td>
            </tr>
          <tr>
                <td class="documentation-option-type-click">
                    <span id='Span78'>getselectedrowindex</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                       <p>The expected selection mode is 'singlerow', 'multiplerows' or 'multiplerowsextended'</p>
                        <p>
                            Gets the bound index of the selected row. Returns -1, if there's no selection. 
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the getselectedrowindex method.
                        </p>
                        <pre><code>
var rowindex = $('#grid').jqxGrid('getselectedrowindex');
                        </code></pre>
                    </div>
                </td>
            </tr>
         <tr>
                <td class="documentation-option-type-click">
                    <span id='Span108'>getselectedrowindexes</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>The expected selection mode is 'singlerow', 'multiplerows' or 'multiplerowsextended'</p>
                        <p>
                            Gets the indexes of the selected rows. Returns an array of the selected rows.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the getselectedrowindexes method.
                        </p>
                        <pre><code>
var rowindexes = $('#grid').jqxGrid('getselectedrowindexes');
                        </code></pre>
                    </div>
                </td>
            </tr>
          <tr>
                <td class="documentation-option-type-click">
                    <span id='Span157'>getselectedcell</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                       <p>The expected selection mode is 'singlecell', 'multiplecells' or 'multiplecellsextended'</p>
                         <p>
                            Gets the selected cell. The returned value is an Object with two fields: 'rowindex' - the row's bound index and 'datafield' - the column's datafield.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the getselectedcell method.
                        </p>
                        <pre><code>
var cell = $('#grid').jqxGrid('getselectedcell');
                        </code></pre>
                    </div>
                </td>
            </tr>
      <tr>
                <td class="documentation-option-type-click">
                    <span id='Span158'>getselectedcells</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>The expected selection mode is 'singlecell', 'multiplecells' or 'multiplecellsextended'</p>
                        <p>
                            Gets all selected cells. Returns an array of all selected cells. Each cell in the array is an Object with two fields: 'rowindex' - the row's bound index and 'datafield' - the column's datafield.
                        </p>
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the getselectedcells method.
                        </p>
                        <pre><code>
var cells = $('#grid').jqxGrid('getselectedcells');
                        </code></pre>
                    </div>
                </td>
            </tr>
          <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                    Aggregates(requires jqxgrid.aggregates.js) 
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
          <tr>
                <td class="documentation-option-type-click">
                    <span id='Span98'>refreshaggregates</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>Refreshes the Aggregates in the Grid's status bar.</p>
                    
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the refreshaggregates method.
                        </p>
                        <pre><code>
$('#grid').jqxGrid('refreshaggregates');
                        </code></pre>
                    </div>
                </td>
            </tr>
          <tr>
                <td class="documentation-option-type-click">
                    <span id='Span101'>renderaggregates</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>Renders the aggregates in the Grid's status bar.</p>
                    
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the renderaggregates method.
                        </p>
                        <pre><code>
$('#grid').jqxGrid('renderaggregates');
                        </code></pre>
                    </div>
                </td>
            </tr>
       <tr>
                <td class="documentation-option-type-click">
                    <span id='Span102'>getcolumnaggregateddata</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>Gets the aggregated data of a Grid column. Returns a JSON object. Each field name is the aggregate's type('min', 'max', 'sum', etc.).</p>
                    
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the getcolumnaggregateddata method.
                        </p>
                        <pre><code>
var summaryData = $("#jqxGrid").jqxGrid('getcolumnaggregateddata', 'quantity', ['min', 'max']);
                        </code></pre>
                    </div>
                </td>
            </tr>
            <tr>
                <th>
                    Export(requires jqxdata.export.js and jqxgrid.export.js) 
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
          <tr>
                <td class="documentation-option-type-click">
                    <span id='Span159'>exportdata</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>Exports all rows loaded within the Grid to Excel, XML, CSV, TSV, HTML, PDF or JSON.
                        </p>
                        <br />
                         The first parameter of the export method determines the export's type - 'xls', 'xml', 'html', 'json', 'tsv' or 'csv'.
                         <br />
                         The second parameter is the file's name. If you don't provide a file name, the Grid will export the data to a local variable. 
                        <br />
                        For example:
                        <pre><code>var data = $("#jqxgrid").jqxGrid('exportdata', 'json');</code></pre>
                         <br />
                         The third parameter is optional and determines whether to export the column's header or not. Acceptable values are - true and false. By default, the exporter exports the columns header.                    
                         <br />
                         The fourth parameter is optional and determines the array of rows to be exported. By default all rows are exported. Set null, if you want all rows to be exported.                   
                         <br />
                         The fifth parameter is optional and determines whether to export hidden columns. Acceptable values are - true and false. By default, the exporter does not export the hidden columns.                  
                         <br />
                         The last parameter is optional and determines the url of the export server. By default, the exporter is hosted on a jQWidgets server.
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the export method.
                        </p>
                        <pre><code>
 $("#jqxgrid").jqxGrid('exportdata', 'json', 'jqxGrid');
                        </code></pre>
                        <br />
                        Export to Excel works with the ExcelML format. ExcelML is XML-based file format. It complies to the <a href="http://msdn.microsoft.com/en-us/library/aa140066(office.10).aspx">Microsoft XMLSS specification</a> and is supported in Microsoft Office 2003 and later. 
                        <br />
                        * When you open export to Excel, you may receive the following message: "The file you are trying to open, 'file_name.xls', is in a different format than specified by the file extension. Verify that the file is not corrupted and is from a trusted source before opening this file. Do you want to open the file now?"
                        <br />
                        The reason of this warning message is explained in details in the following post: <a href="http://blogs.msdn.com/b/vsofficedeveloper/archive/2008/03/11/excel-2007-extension-warning.aspx">excel-2007-extension-warning.aspx</a>                    
                    </div>
                </td>
            </tr>

                       <tr>
                <th>
                    Save/Load State(requires jqxgrid.storage.js) 
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
            <tr>
                <th>
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
          <tr>
                <td class="documentation-option-type-click">
                    <span id='Span186'>savestate</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>Saves the Grid's current state. the savestate method saves the following information: 'sort column, sort order, page number, page size, applied filters and filter row values, column widths and visibility, cells and rows selection and groups.  
                        </p>
                        <br />       
                        The method saves the Grid's state, but also returns a JSON object with the state. In case of browsers that do not support localStorage, you can pass the state object to the 'loadState' method.           
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the savestate method.
                        </p>
                        <pre><code>
 var state = $("#jqxgrid").jqxGrid('savestate');
                        </code></pre>
                    </div>
                </td>
            </tr>
          <tr>
                <td class="documentation-option-type-click">
                    <span id='Span187'>loadstate</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>Loads the Grid's state. the loadstate method loads the following information: 'sort column, sort order, page number, page size, applied filters and filter row values, column widths and visibility, cells and rows selection and groups.  
                        </p>
                        <br />                  
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the loadstate method.
                        </p>
                        <pre><code>
 $("#jqxgrid").jqxGrid('loadstate');
                        </code></pre>
                        <h4>
                            Code example with state object returned from the 'savestate' method.</h4>
                        <p>
                            Invoke the loadstate method.
                        </p>
                        <pre><code>
 $("#jqxgrid").jqxGrid('loadstate', state);
                        </code></pre>

                    </div>
                </td>
            </tr>
       <tr>
                <td class="documentation-option-type-click">
                    <span id='Span188'>getstate</span>
                </td>
                <td>
                    <span>Method</span>
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td colspan='3' style='width: 100%'>
                    <div class="documentation-option-description property-content" style="display: none;">
                        <p>Gets the Grid's state. the getstate method gets the following information: 'sort column, sort order, page number, page size, applied filters and filter row values, column widths and visibility, cells and rows selection and groups.  
                        </p>
                        The returned value is a JSON object with the following fields:
                        <ul>
                            <li>width - the Grid's width.</li>
                            <li>height - the Grid's height.</li>
                            <li>pagenum - the Grid's page number.</li>
                            <li>pagesize - the Grid's page size.</li>
                            <li>pagesizeoptions - the Grid's page size options - an array of the available page sizes.</li>
                            <li>sortcolumn - the Grid's sort column. The value is the column's datafield or null, if sorting is not applied.</li>
                            <li>sortdirection - JSON Object with two boolean fields: 'ascending' and 'descending'.</li>
                            <li>filters - the applied filters. See the 'getfilterinformation' method.</li>
                            <li>groups - the Grid's groups array which contains the grouped columns data fields.</li>
                            <li>columns - an array of Columns. Each column in the array has the following fields:
                                <ul>
                                    <li>width - column's width.</li>
                                    <li>hidden - column's visible state.</li>
                                    <li>pinned - column's pinned state.</li>
                                    <li>groupable - column's groupable state.</li>
                                    <li>resizable - column's resizable state.</li>
                                    <li>draggable - column's draggable state.</li>
                                    <li>text - column's text.</li>
                                    <li>align - column's align.</li>
                                    <li>cellsalign - column's cells align.</li>
                                </ul>
                            </li>
                        </ul>
                        <br />                  
                        <h4>
                            Code example</h4>
                        <p>
                            Invoke the getstate method.
                        </p>
                        <pre><code>
 var state = $("#jqxgrid").jqxGrid('getstate');
                        </code></pre>
                    </div>
                </td>
            </tr>
        </table>
        <br />
    </div>
</body>
</html>
